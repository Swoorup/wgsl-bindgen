---
source: wgsl_bindgen/tests/shader_defs_tests.rs
---
#![allow(unused, non_snake_case, non_camel_case_types, non_upper_case_globals)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]
pub enum ShaderEntry {
  TestShader,
}
impl ShaderEntry {
  pub fn create_pipeline_layout(&self, device: &wgpu::Device) -> wgpu::PipelineLayout {
    match self {
      Self::TestShader => test_shader::create_pipeline_layout(device),
    }
  }
  pub fn create_shader_module_relative_path(
    &self,
    device: &wgpu::Device,
    base_dir: &str,
    shader_defs: std::collections::HashMap<String, naga_oil::compose::ShaderDefValue>,
    load_file: impl Fn(&str) -> Result<String, std::io::Error>,
  ) -> Result<wgpu::ShaderModule, naga_oil::compose::ComposerError> {
    match self {
      Self::TestShader => test_shader::create_shader_module_relative_path(
        device,
        base_dir,
        shader_defs,
        load_file,
      ),
    }
  }
  pub fn relative_path(&self) -> &'static str {
    match self {
      Self::TestShader => test_shader::SHADER_ENTRY_PATH,
    }
  }
  pub fn default_shader_defs(
  ) -> std::collections::HashMap<String, naga_oil::compose::ShaderDefValue> {
    std::collections::HashMap::from([
      ("USE_TIME".to_string(), naga_oil::compose::ShaderDefValue::Bool(true)),
      ("USE_SCALE".to_string(), naga_oil::compose::ShaderDefValue::Bool(true)),
      ("USE_TEXTURE".to_string(), naga_oil::compose::ShaderDefValue::Bool(true)),
      ("DEBUG_MODE".to_string(), naga_oil::compose::ShaderDefValue::Bool(false)),
    ])
  }
  #[doc = r" Visits and processes all shader files in a dependency tree."]
  #[doc = r""]
  #[doc = r" This function traverses the shader dependency tree and calls the visitor function"]
  #[doc = r" for each file encountered. This allows for custom processing like hot reloading,"]
  #[doc = r" caching, or debugging."]
  #[doc = r""]
  #[doc = r" # Arguments"]
  #[doc = r""]
  #[doc = r" * `base_dir` - The base directory for resolving relative paths"]
  #[doc = r" * `load_file` - Function to load file contents from a path"]
  #[doc = r" * `visitor` - Function called for each file with (file_path, file_content)"]
  #[doc = r""]
  #[doc = r" # Returns"]
  #[doc = r""]
  #[doc = r" Returns `Ok(())` if all files were processed successfully, or an error string."]
  pub fn visit_shader_files(
    &self,
    base_dir: &str,
    load_file: impl Fn(&str) -> Result<String, std::io::Error>,
    mut visitor: impl FnMut(&str, &str),
  ) -> Result<(), String> {
    fn visit_dependencies_recursive(
      base_dir: &str,
      source: &str,
      current_path: &str,
      load_file: &impl Fn(&str) -> Result<String, std::io::Error>,
      visitor: &mut impl FnMut(&str, &str),
      visited: &mut std::collections::HashSet<String>,
    ) -> Result<(), String> {
      let (_, imports, _) = naga_oil::compose::get_preprocessor_data(source);
      for import in imports {
        let import_path = if import.import.starts_with('\"') {
          import
            .import
            .chars()
            .skip(1)
            .take_while(|c| *c != '\"')
            .collect::<String>()
        } else {
          let module_path = import
            .import
            .split("::")
            .collect::<Vec<_>>()
            .join(std::path::MAIN_SEPARATOR_STR);
          format!("{module_path}.wgsl")
        };
        let full_import_path =
          if import_path.starts_with('/') || import_path.starts_with('\\') {
            format!("{base_dir}{import_path}")
          } else {
            std::path::Path::new(base_dir)
              .join(import_path)
              .display()
              .to_string()
          };
        if visited.contains(&full_import_path) {
          continue;
        }
        visited.insert(full_import_path.clone());
        let import_source = match load_file(&full_import_path) {
          Err(err) if err.kind() == std::io::ErrorKind::NotFound => {
            continue;
          }
          Err(err) => {
            return Err(format!("Failed to load import file {full_import_path}: {err}"));
          }
          Ok(content) => content,
        };
        visit_dependencies_recursive(
          base_dir,
          &import_source,
          full_import_path.trim_start_matches(&format!("{base_dir}/")),
          load_file,
          visitor,
          visited,
        )?;
        visitor(&full_import_path, &import_source);
      }
      Ok(())
    }
    let entry_path = format!("{}/{}", base_dir, self.relative_path());
    let entry_source = load_file(&entry_path)
      .map_err(|e| format!("Failed to load entry point {entry_path}: {e}"))?;
    visitor(&entry_path, &entry_source);
    let mut visited = std::collections::HashSet::new();
    visit_dependencies_recursive(
      base_dir,
      &entry_source,
      self.relative_path(),
      &load_file,
      &mut visitor,
      &mut visited,
    )?;
    Ok(())
  }
  pub fn load_naga_module_from_path_contents(
    &self,
    base_dir: &str,
    composer: &mut naga_oil::compose::Composer,
    shader_defs: std::collections::HashMap<String, naga_oil::compose::ShaderDefValue>,
    files: Vec<(String, String)>,
  ) -> Result<wgpu::naga::Module, naga_oil::compose::ComposerError> {
    let entry_path = format!("{}/{}", base_dir, self.relative_path());
    for (file_path, file_content) in &files {
      if *file_path == entry_path {
        continue;
      }
      let relative_path = file_path.trim_start_matches(&format!("{base_dir}/"));
      let as_name = std::path::Path::new(relative_path)
        .with_extension("")
        .with_extension("")
        .iter()
        .flat_map(|s| s.to_str())
        .collect::<Vec<_>>()
        .join("::")
        .to_string();
      composer.add_composable_module(naga_oil::compose::ComposableModuleDescriptor {
        source: file_content,
        file_path: relative_path,
        language: naga_oil::compose::ShaderLanguage::Wgsl,
        shader_defs: shader_defs.clone(),
        as_name: Some(as_name),
        ..Default::default()
      })?;
    }
    let (_, entry_source) = &files[0];
    composer.make_naga_module(naga_oil::compose::NagaModuleDescriptor {
      source: entry_source,
      file_path: self.relative_path(),
      shader_defs,
      ..Default::default()
    })
  }
  pub fn load_naga_module_from_path(
    &self,
    base_dir: &str,
    composer: &mut naga_oil::compose::Composer,
    shader_defs: std::collections::HashMap<String, naga_oil::compose::ShaderDefValue>,
    load_file: impl Fn(&str) -> Result<String, std::io::Error>,
  ) -> Result<wgpu::naga::Module, String> {
    let mut files = Vec::<(String, String)>::new();
    self.visit_shader_files(base_dir, &load_file, |file_path, file_content| {
      files.push((file_path.to_string(), file_content.to_string()));
    })?;
    self
      .load_naga_module_from_path_contents(base_dir, composer, shader_defs, files)
      .map_err(|e| format!("{e}"))
  }
}
mod _root {
  pub use super::*;
  pub trait SetBindGroup {
    fn set_bind_group(
      &mut self,
      index: u32,
      bind_group: &wgpu::BindGroup,
      offsets: &[wgpu::DynamicOffset],
    );
  }
  impl SetBindGroup for wgpu::RenderPass<'_> {
    fn set_bind_group(
      &mut self,
      index: u32,
      bind_group: &wgpu::BindGroup,
      offsets: &[wgpu::DynamicOffset],
    ) {
      self.set_bind_group(index, bind_group, offsets);
    }
  }
  impl SetBindGroup for wgpu::RenderBundleEncoder<'_> {
    fn set_bind_group(
      &mut self,
      index: u32,
      bind_group: &wgpu::BindGroup,
      offsets: &[wgpu::DynamicOffset],
    ) {
      self.set_bind_group(index, bind_group, offsets);
    }
  }
}
pub mod layout_asserts {
  use super::{_root, _root::*};
  const WGSL_BASE_TYPE_ASSERTS: () = {
    assert!(std::mem::size_of::<glam::IVec2>() == 8);
    assert!(std::mem::align_of::<glam::IVec2>() == 4);
    assert!(std::mem::size_of::<glam::IVec3>() == 12);
    assert!(std::mem::align_of::<glam::IVec3>() == 4);
    assert!(std::mem::size_of::<glam::IVec4>() == 16);
    assert!(std::mem::align_of::<glam::IVec4>() == 4);
    assert!(std::mem::size_of::<glam::UVec2>() == 8);
    assert!(std::mem::align_of::<glam::UVec2>() == 4);
    assert!(std::mem::size_of::<glam::UVec3>() == 12);
    assert!(std::mem::align_of::<glam::UVec3>() == 4);
    assert!(std::mem::size_of::<glam::UVec4>() == 16);
    assert!(std::mem::align_of::<glam::UVec4>() == 4);
    assert!(std::mem::size_of::<glam::Vec2>() == 8);
    assert!(std::mem::align_of::<glam::Vec2>() == 4);
    assert!(std::mem::size_of::<glam::Vec3>() == 12);
    assert!(std::mem::align_of::<glam::Vec3>() == 4);
    assert!(std::mem::size_of::<glam::Vec4>() == 16);
    assert!(std::mem::align_of::<glam::Vec4>() == 16);
    assert!(std::mem::size_of::<glam::Mat2>() == 16);
    assert!(std::mem::align_of::<glam::Mat2>() == 16);
    assert!(std::mem::size_of::<glam::Mat3A>() == 48);
    assert!(std::mem::align_of::<glam::Mat3A>() == 16);
    assert!(std::mem::size_of::<glam::Mat4>() == 64);
    assert!(std::mem::align_of::<glam::Mat4>() == 16);
  };
  const TEST_SHADER_UNIFORMS_ASSERTS: () = {
    assert!(std::mem::offset_of!(test_shader::Uniforms, color) == 0);
    assert!(std::mem::offset_of!(test_shader::Uniforms, time) == 16);
    assert!(std::mem::offset_of!(test_shader::Uniforms, scale) == 20);
    assert!(std::mem::size_of::<test_shader::Uniforms>() == 32);
  };
}
pub mod test_shader {
  use super::{_root, _root::*};
  #[repr(C, align(16))]
  #[derive(Debug, PartialEq, Clone, Copy)]
  pub struct Uniforms {
    #[doc = "offset: 0, size: 16, type: `vec4<f32>`"]
    pub color: glam::Vec4,
    #[doc = "offset: 16, size: 4, type: `f32`"]
    pub time: f32,
    #[doc = "offset: 20, size: 4, type: `f32`"]
    pub scale: f32,
    pub _pad_scale: [u8; 0x8],
  }
  impl Uniforms {
    pub const fn new(color: glam::Vec4, time: f32, scale: f32) -> Self {
      Self {
        color,
        time,
        scale,
        _pad_scale: [0; 0x8],
      }
    }
  }
  #[repr(C)]
  #[derive(Debug, PartialEq, Clone, Copy)]
  pub struct UniformsInit {
    pub color: glam::Vec4,
    pub time: f32,
    pub scale: f32,
  }
  impl UniformsInit {
    pub fn build(&self) -> Uniforms {
      Uniforms {
        color: self.color,
        time: self.time,
        scale: self.scale,
        _pad_scale: [0; 0x8],
      }
    }
  }
  impl From<UniformsInit> for Uniforms {
    fn from(data: UniformsInit) -> Self {
      data.build()
    }
  }
  pub const ENTRY_VS_MAIN: &str = "vs_main";
  pub const ENTRY_FS_MAIN: &str = "fs_main";
  #[derive(Debug)]
  pub struct VertexEntry<const N: usize> {
    pub entry_point: &'static str,
    pub buffers: [wgpu::VertexBufferLayout<'static>; N],
    pub constants: Vec<(&'static str, f64)>,
  }
  pub fn vertex_state<'a, const N: usize>(
    module: &'a wgpu::ShaderModule,
    entry: &'a VertexEntry<N>,
  ) -> wgpu::VertexState<'a> {
    wgpu::VertexState {
      module,
      entry_point: Some(entry.entry_point),
      buffers: &entry.buffers,
      compilation_options: wgpu::PipelineCompilationOptions {
        constants: &entry.constants,
        ..Default::default()
      },
    }
  }
  pub fn vs_main_entry() -> VertexEntry<0> {
    VertexEntry {
      entry_point: ENTRY_VS_MAIN,
      buffers: [],
      constants: Default::default(),
    }
  }
  #[derive(Debug)]
  pub struct FragmentEntry<const N: usize> {
    pub entry_point: &'static str,
    pub targets: [Option<wgpu::ColorTargetState>; N],
    pub constants: Vec<(&'static str, f64)>,
  }
  pub fn fragment_state<'a, const N: usize>(
    module: &'a wgpu::ShaderModule,
    entry: &'a FragmentEntry<N>,
  ) -> wgpu::FragmentState<'a> {
    wgpu::FragmentState {
      module,
      entry_point: Some(entry.entry_point),
      targets: &entry.targets,
      compilation_options: wgpu::PipelineCompilationOptions {
        constants: &entry.constants,
        ..Default::default()
      },
    }
  }
  pub fn fs_main_entry(targets: [Option<wgpu::ColorTargetState>; 1]) -> FragmentEntry<1> {
    FragmentEntry {
      entry_point: ENTRY_FS_MAIN,
      targets,
      constants: Default::default(),
    }
  }
  #[derive(Debug)]
  pub struct WgpuBindGroup0EntriesParams<'a> {
    pub uniforms: wgpu::BufferBinding<'a>,
    pub test_texture: &'a wgpu::TextureView,
    pub test_sampler: &'a wgpu::Sampler,
  }
  #[derive(Clone, Debug)]
  pub struct WgpuBindGroup0Entries<'a> {
    pub uniforms: wgpu::BindGroupEntry<'a>,
    pub test_texture: wgpu::BindGroupEntry<'a>,
    pub test_sampler: wgpu::BindGroupEntry<'a>,
  }
  impl<'a> WgpuBindGroup0Entries<'a> {
    pub fn new(params: WgpuBindGroup0EntriesParams<'a>) -> Self {
      Self {
        uniforms: wgpu::BindGroupEntry {
          binding: 0,
          resource: wgpu::BindingResource::Buffer(params.uniforms),
        },
        test_texture: wgpu::BindGroupEntry {
          binding: 1,
          resource: wgpu::BindingResource::TextureView(params.test_texture),
        },
        test_sampler: wgpu::BindGroupEntry {
          binding: 2,
          resource: wgpu::BindingResource::Sampler(params.test_sampler),
        },
      }
    }
    pub fn into_array(self) -> [wgpu::BindGroupEntry<'a>; 3] {
      [self.uniforms, self.test_texture, self.test_sampler]
    }
    pub fn collect<B: FromIterator<wgpu::BindGroupEntry<'a>>>(self) -> B {
      self.into_array().into_iter().collect()
    }
  }
  #[derive(Debug)]
  pub struct WgpuBindGroup0(wgpu::BindGroup);
  impl WgpuBindGroup0 {
    pub const LAYOUT_DESCRIPTOR: wgpu::BindGroupLayoutDescriptor<'static> =
      wgpu::BindGroupLayoutDescriptor {
        label: Some("TestShader::BindGroup0::LayoutDescriptor"),
        entries: &[
          #[doc = " @binding(0): \"uniforms\""]
          wgpu::BindGroupLayoutEntry {
            binding: 0,
            visibility: wgpu::ShaderStages::VERTEX_FRAGMENT,
            ty: wgpu::BindingType::Buffer {
              ty: wgpu::BufferBindingType::Uniform,
              has_dynamic_offset: false,
              min_binding_size: std::num::NonZeroU64::new(std::mem::size_of::<
                _root::test_shader::Uniforms,
              >() as _),
            },
            count: None,
          },
          #[doc = " @binding(1): \"test_texture\""]
          wgpu::BindGroupLayoutEntry {
            binding: 1,
            visibility: wgpu::ShaderStages::VERTEX_FRAGMENT,
            ty: wgpu::BindingType::Texture {
              sample_type: wgpu::TextureSampleType::Float { filterable: true },
              view_dimension: wgpu::TextureViewDimension::D2,
              multisampled: false,
            },
            count: None,
          },
          #[doc = " @binding(2): \"test_sampler\""]
          wgpu::BindGroupLayoutEntry {
            binding: 2,
            visibility: wgpu::ShaderStages::VERTEX_FRAGMENT,
            ty: wgpu::BindingType::Sampler(wgpu::SamplerBindingType::Filtering),
            count: None,
          },
        ],
      };
    pub fn get_bind_group_layout(device: &wgpu::Device) -> wgpu::BindGroupLayout {
      device.create_bind_group_layout(&Self::LAYOUT_DESCRIPTOR)
    }
    pub fn from_bindings(device: &wgpu::Device, bindings: WgpuBindGroup0Entries) -> Self {
      let bind_group_layout = Self::get_bind_group_layout(device);
      let entries = bindings.into_array();
      let bind_group = device.create_bind_group(&wgpu::BindGroupDescriptor {
        label: Some("TestShader::BindGroup0"),
        layout: &bind_group_layout,
        entries: &entries,
      });
      Self(bind_group)
    }
    pub fn set(&self, pass: &mut impl SetBindGroup) {
      pass.set_bind_group(0, &self.0, &[]);
    }
  }
  #[doc = " Bind groups can be set individually using their set(render_pass) method, or all at once using `WgpuBindGroups::set`."]
  #[doc = " For optimal performance with many draw calls, it's recommended to organize bindings into bind groups based on update frequency:"]
  #[doc = "   - Bind group 0: Least frequent updates (e.g. per frame resources)"]
  #[doc = "   - Bind group 1: More frequent updates"]
  #[doc = "   - Bind group 2: More frequent updates"]
  #[doc = "   - Bind group 3: Most frequent updates (e.g. per draw resources)"]
  #[derive(Debug, Copy, Clone)]
  pub struct WgpuBindGroups<'a> {
    pub bind_group0: &'a WgpuBindGroup0,
  }
  impl<'a> WgpuBindGroups<'a> {
    pub fn set(&self, pass: &mut impl SetBindGroup) {
      self.bind_group0.set(pass);
    }
  }
  #[derive(Debug)]
  pub struct WgpuPipelineLayout;
  impl WgpuPipelineLayout {
    pub fn bind_group_layout_entries(
      entries: [wgpu::BindGroupLayout; 1],
    ) -> [wgpu::BindGroupLayout; 1] {
      entries
    }
  }
  pub fn create_pipeline_layout(device: &wgpu::Device) -> wgpu::PipelineLayout {
    device.create_pipeline_layout(&wgpu::PipelineLayoutDescriptor {
      label: Some("TestShader::PipelineLayout"),
      bind_group_layouts: &[&WgpuBindGroup0::get_bind_group_layout(device)],
      push_constant_ranges: &[],
    })
  }
  pub const SHADER_ENTRY_PATH: &str = "test_shader.wgsl";
  pub fn create_shader_module_relative_path(
    device: &wgpu::Device,
    base_dir: &str,
    shader_defs: std::collections::HashMap<String, naga_oil::compose::ShaderDefValue>,
    load_file: impl Fn(&str) -> Result<String, std::io::Error>,
  ) -> Result<wgpu::ShaderModule, naga_oil::compose::ComposerError> {
    let mut composer = naga_oil::compose::Composer::default();
    let module = ShaderEntry::TestShader
      .load_naga_module_from_path(base_dir, &mut composer, shader_defs, load_file)
      .map_err(|e| naga_oil::compose::ComposerError {
        inner: naga_oil::compose::ComposerErrorInner::ImportNotFound(e, 0),
        source: naga_oil::compose::ErrSource::Constructing {
          path: "load_naga_module_from_path".to_string(),
          source: "Generated code".to_string(),
          offset: 0,
        },
      })?;
    let shader_module = device.create_shader_module(wgpu::ShaderModuleDescriptor {
      label: Some("test_shader.wgsl"),
      source: wgpu::ShaderSource::Naga(std::borrow::Cow::Owned(module)),
    });
    Ok(shader_module)
  }
}
pub mod bytemuck_impls {
  use super::{_root, _root::*};
  unsafe impl bytemuck::Zeroable for test_shader::Uniforms {}
  unsafe impl bytemuck::Pod for test_shader::Uniforms {}
}
