---
source: wgsl_bindgen/tests/bindgen_tests.rs
---
#![allow(unused, non_snake_case, non_camel_case_types, non_upper_case_globals)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]
pub enum ShaderEntry {
  BasicMain,
}
impl ShaderEntry {
  pub fn create_pipeline_layout(&self, device: &wgpu::Device) -> wgpu::PipelineLayout {
    match self {
      Self::BasicMain => basic::main::create_pipeline_layout(device),
    }
  }
  pub fn create_shader_module_embed_source(
    &self,
    device: &wgpu::Device,
  ) -> wgpu::ShaderModule {
    match self {
      Self::BasicMain => basic::main::create_shader_module_embed_source(device),
    }
  }
  pub fn create_shader_module_relative_path(
    &self,
    device: &wgpu::Device,
    base_dir: &str,
    entry_point: ShaderEntry,
    shader_defs: std::collections::HashMap<String, naga_oil::compose::ShaderDefValue>,
    load_file: impl Fn(&str) -> Result<String, std::io::Error>,
  ) -> Result<wgpu::ShaderModule, naga_oil::compose::ComposerError> {
    match self {
      Self::BasicMain => basic::main::create_shader_module_relative_path(
        device,
        base_dir,
        *self,
        shader_defs,
        load_file,
      ),
    }
  }
  pub fn relative_path(&self) -> &'static str {
    match self {
      Self::BasicMain => basic::main::SHADER_ENTRY_PATH,
    }
  }
}
mod _root {
  pub use super::*;
  #[doc = r" Visits and processes all shader files in a dependency tree."]
  #[doc = r""]
  #[doc = r" This function traverses the shader dependency tree and calls the visitor function"]
  #[doc = r" for each file encountered. This allows for custom processing like hot reloading,"]
  #[doc = r" caching, or debugging."]
  #[doc = r""]
  #[doc = r" # Arguments"]
  #[doc = r""]
  #[doc = r" * `base_dir` - The base directory for resolving relative paths"]
  #[doc = r" * `entry_point` - The shader entry point to start traversal from"]
  #[doc = r" * `shader_defs` - Shader defines to be used during processing"]
  #[doc = r" * `load_file` - Function to load file contents from a path"]
  #[doc = r" * `visitor` - Function called for each file with (file_path, file_content)"]
  #[doc = r""]
  #[doc = r" # Returns"]
  #[doc = r""]
  #[doc = r" Returns `Ok(())` if all files were processed successfully, or an error string."]
  pub fn visit_shader_files(
    base_dir: &str,
    entry_point: ShaderEntry,
    load_file: impl Fn(&str) -> Result<String, std::io::Error>,
    mut visitor: impl FnMut(&str, &str),
  ) -> Result<(), String> {
    fn visit_dependencies_recursive(
      base_dir: &str,
      source: &str,
      current_path: &str,
      load_file: &impl Fn(&str) -> Result<String, std::io::Error>,
      visitor: &mut impl FnMut(&str, &str),
      visited: &mut std::collections::HashSet<String>,
    ) -> Result<(), String> {
      let (_, imports, _) = naga_oil::compose::get_preprocessor_data(source);
      for import in imports {
        let import_path = if import.import.starts_with('\"') {
          import
            .import
            .chars()
            .skip(1)
            .take_while(|c| *c != '\"')
            .collect::<String>()
        } else {
          let module_path = if let Some(double_colon_pos) = import.import.find("::") {
            &import.import[..double_colon_pos]
          } else {
            &import.import
          };
          format!("{module_path}.wgsl")
        };
        let full_import_path =
          if import_path.starts_with('/') || import_path.starts_with('\\') {
            format!("{base_dir}{import_path}")
          } else {
            std::path::Path::new(base_dir)
              .join(import_path)
              .display()
              .to_string()
          };
        if visited.contains(&full_import_path) {
          continue;
        }
        visited.insert(full_import_path.clone());
        let import_source = load_file(&full_import_path)
          .map_err(|e| format!("Failed to load {full_import_path}: {e}"))?;
        visitor(&full_import_path, &import_source);
        visit_dependencies_recursive(
          base_dir,
          &import_source,
          full_import_path.trim_start_matches(&format!("{base_dir}/")),
          load_file,
          visitor,
          visited,
        )?;
      }
      Ok(())
    }
    let entry_path = format!("{}/{}", base_dir, entry_point.relative_path());
    let entry_source = load_file(&entry_path)
      .map_err(|e| format!("Failed to load entry point {entry_path}: {e}"))?;
    visitor(&entry_path, &entry_source);
    let mut visited = std::collections::HashSet::new();
    visit_dependencies_recursive(
      base_dir,
      &entry_source,
      entry_point.relative_path(),
      &load_file,
      &mut visitor,
      &mut visited,
    )?;
    Ok(())
  }
  pub fn load_naga_module_from_path(
    base_dir: &str,
    entry_point: ShaderEntry,
    composer: &mut naga_oil::compose::Composer,
    shader_defs: std::collections::HashMap<String, naga_oil::compose::ShaderDefValue>,
    load_file: impl Fn(&str) -> Result<String, std::io::Error>,
  ) -> Result<wgpu::naga::Module, String> {
    let mut files = std::collections::HashMap::<String, String>::new();
    visit_shader_files(base_dir, entry_point, &load_file, |file_path, file_content| {
      files.insert(file_path.to_string(), file_content.to_string());
    })?;
    let entry_path = format!("{}/{}", base_dir, entry_point.relative_path());
    for (file_path, file_content) in &files {
      if *file_path == entry_path {
        continue;
      }
      let relative_path = file_path.trim_start_matches(&format!("{base_dir}/"));
      let as_name = std::path::Path::new(relative_path)
        .file_stem()
        .and_then(|s| s.to_str())
        .map(|s| s.to_string());
      composer
        .add_composable_module(naga_oil::compose::ComposableModuleDescriptor {
          source: file_content,
          file_path: relative_path,
          language: naga_oil::compose::ShaderLanguage::Wgsl,
          shader_defs: shader_defs.clone(),
          as_name,
          ..Default::default()
        })
        .map_err(|e| format!("Failed to add composable module: {e}"))?;
    }
    let entry_source = files
      .get(&entry_path)
      .ok_or_else(|| format!("Entry point file not found: {entry_path}"))?;
    composer
      .make_naga_module(naga_oil::compose::NagaModuleDescriptor {
        source: entry_source,
        file_path: entry_point.relative_path(),
        shader_defs,
        ..Default::default()
      })
      .map_err(|e| format!("Failed to create final module: {e}"))
  }
  pub trait SetBindGroup {
    fn set_bind_group(
      &mut self,
      index: u32,
      bind_group: &wgpu::BindGroup,
      offsets: &[wgpu::DynamicOffset],
    );
  }
  impl SetBindGroup for wgpu::ComputePass<'_> {
    fn set_bind_group(
      &mut self,
      index: u32,
      bind_group: &wgpu::BindGroup,
      offsets: &[wgpu::DynamicOffset],
    ) {
      self.set_bind_group(index, bind_group, offsets);
    }
  }
}
pub mod layout_asserts {
  use super::{_root, _root::*};
  const WGSL_BASE_TYPE_ASSERTS: () = {
    assert!(std::mem::size_of::<glam::IVec2>() == 8);
    assert!(std::mem::align_of::<glam::IVec2>() == 4);
    assert!(std::mem::size_of::<glam::IVec3>() == 12);
    assert!(std::mem::align_of::<glam::IVec3>() == 4);
    assert!(std::mem::size_of::<glam::IVec4>() == 16);
    assert!(std::mem::align_of::<glam::IVec4>() == 4);
    assert!(std::mem::size_of::<glam::UVec2>() == 8);
    assert!(std::mem::align_of::<glam::UVec2>() == 4);
    assert!(std::mem::size_of::<glam::UVec3>() == 12);
    assert!(std::mem::align_of::<glam::UVec3>() == 4);
    assert!(std::mem::size_of::<glam::UVec4>() == 16);
    assert!(std::mem::align_of::<glam::UVec4>() == 4);
    assert!(std::mem::size_of::<glam::Vec2>() == 8);
    assert!(std::mem::align_of::<glam::Vec2>() == 4);
    assert!(std::mem::size_of::<glam::Vec3>() == 12);
    assert!(std::mem::align_of::<glam::Vec3>() == 4);
    assert!(std::mem::size_of::<glam::Vec4>() == 16);
    assert!(std::mem::align_of::<glam::Vec4>() == 16);
    assert!(std::mem::size_of::<glam::Mat2>() == 16);
    assert!(std::mem::align_of::<glam::Mat2>() == 16);
    assert!(std::mem::size_of::<glam::Mat3A>() == 48);
    assert!(std::mem::align_of::<glam::Mat3A>() == 16);
    assert!(std::mem::size_of::<glam::Mat4>() == 64);
    assert!(std::mem::align_of::<glam::Mat4>() == 16);
  };
  const BASICMAIN_STYLE_ASSERTS: () = {
    assert!(std::mem::offset_of!(basic::main::Style, color) == 0);
    assert!(std::mem::offset_of!(basic::main::Style, width) == 16);
    assert!(std::mem::size_of::<basic::main::Style>() == 256);
  };
}
pub mod basic {
  use super::{_root, _root::*};
  pub mod main {
    use super::{_root, _root::*};
    #[repr(C, align(256))]
    #[derive(Debug, PartialEq, Clone, Copy)]
    pub struct Style {
      #[doc = " size: 16, offset: 0x0, type: `vec4<f32>`"]
      pub color: glam::Vec4,
      #[doc = " size: 4, offset: 0x10, type: `f32`"]
      pub width: f32,
      pub _pad_width: [u8; 0xC],
    }
    impl Style {
      pub const fn new(color: glam::Vec4, width: f32) -> Self {
        Self {
          color,
          width,
          _pad_width: [0; 0xC],
        }
      }
    }
    #[repr(C)]
    #[derive(Debug, PartialEq, Clone, Copy)]
    pub struct StyleInit {
      pub color: glam::Vec4,
      pub width: f32,
    }
    impl StyleInit {
      pub const fn build(&self) -> Style {
        Style {
          color: self.color,
          width: self.width,
          _pad_width: [0; 0xC],
        }
      }
    }
    impl From<StyleInit> for Style {
      fn from(data: StyleInit) -> Self {
        data.build()
      }
    }
    pub mod compute {
      use super::{_root, _root::*};
      pub const MAIN_WORKGROUP_SIZE: [u32; 3] = [1, 1, 1];
      pub fn create_main_pipeline_embed_source(
        device: &wgpu::Device,
      ) -> wgpu::ComputePipeline {
        let module = super::create_shader_module_embed_source(device);
        let layout = super::create_pipeline_layout(device);
        device.create_compute_pipeline(&wgpu::ComputePipelineDescriptor {
          label: Some("Compute Pipeline main"),
          layout: Some(&layout),
          module: &module,
          entry_point: Some("main"),
          compilation_options: Default::default(),
          cache: None,
        })
      }
      pub fn create_main_pipeline_relative_path(
        device: &wgpu::Device,
        base_dir: &str,
        entry_point: ShaderEntry,
        shader_defs: std::collections::HashMap<String, naga_oil::compose::ShaderDefValue>,
        load_file: impl Fn(&str) -> Result<String, std::io::Error>,
      ) -> Result<wgpu::ComputePipeline, naga_oil::compose::ComposerError> {
        let module = super::create_shader_module_relative_path(
          device,
          base_dir,
          entry_point,
          shader_defs,
          load_file,
        )?;
        let layout = super::create_pipeline_layout(device);
        Ok(device.create_compute_pipeline(&wgpu::ComputePipelineDescriptor {
          label: Some("Compute Pipeline main"),
          layout: Some(&layout),
          module: &module,
          entry_point: Some("main"),
          compilation_options: Default::default(),
          cache: None,
        }))
      }
    }
    pub const ENTRY_MAIN: &str = "main";
    #[derive(Debug)]
    pub struct WgpuBindGroup0EntriesParams<'a> {
      pub buffer: wgpu::BufferBinding<'a>,
      pub texture_float: &'a wgpu::TextureView,
      pub texture_sint: &'a wgpu::TextureView,
      pub texture_uint: &'a wgpu::TextureView,
    }
    #[derive(Clone, Debug)]
    pub struct WgpuBindGroup0Entries<'a> {
      pub buffer: wgpu::BindGroupEntry<'a>,
      pub texture_float: wgpu::BindGroupEntry<'a>,
      pub texture_sint: wgpu::BindGroupEntry<'a>,
      pub texture_uint: wgpu::BindGroupEntry<'a>,
    }
    impl<'a> WgpuBindGroup0Entries<'a> {
      pub fn new(params: WgpuBindGroup0EntriesParams<'a>) -> Self {
        Self {
          buffer: wgpu::BindGroupEntry {
            binding: 0,
            resource: wgpu::BindingResource::Buffer(params.buffer),
          },
          texture_float: wgpu::BindGroupEntry {
            binding: 1,
            resource: wgpu::BindingResource::TextureView(params.texture_float),
          },
          texture_sint: wgpu::BindGroupEntry {
            binding: 2,
            resource: wgpu::BindingResource::TextureView(params.texture_sint),
          },
          texture_uint: wgpu::BindGroupEntry {
            binding: 3,
            resource: wgpu::BindingResource::TextureView(params.texture_uint),
          },
        }
      }
      pub fn into_array(self) -> [wgpu::BindGroupEntry<'a>; 4] {
        [
          self.buffer,
          self.texture_float,
          self.texture_sint,
          self.texture_uint,
        ]
      }
      pub fn collect<B: FromIterator<wgpu::BindGroupEntry<'a>>>(self) -> B {
        self.into_array().into_iter().collect()
      }
    }
    #[derive(Debug)]
    pub struct WgpuBindGroup0(wgpu::BindGroup);
    impl WgpuBindGroup0 {
      pub const LAYOUT_DESCRIPTOR: wgpu::BindGroupLayoutDescriptor<'static> =
        wgpu::BindGroupLayoutDescriptor {
          label: Some("BasicMain::BindGroup0::LayoutDescriptor"),
          entries: &[
            #[doc = " @binding(0): \"buffer\""]
            wgpu::BindGroupLayoutEntry {
              binding: 0,
              visibility: wgpu::ShaderStages::COMPUTE,
              ty: wgpu::BindingType::Buffer {
                ty: wgpu::BufferBindingType::Storage { read_only: false },
                has_dynamic_offset: false,
                min_binding_size: None,
              },
              count: None,
            },
            #[doc = " @binding(1): \"texture_float\""]
            wgpu::BindGroupLayoutEntry {
              binding: 1,
              visibility: wgpu::ShaderStages::COMPUTE,
              ty: wgpu::BindingType::Texture {
                sample_type: wgpu::TextureSampleType::Float { filterable: true },
                view_dimension: wgpu::TextureViewDimension::D2,
                multisampled: false,
              },
              count: None,
            },
            #[doc = " @binding(2): \"texture_sint\""]
            wgpu::BindGroupLayoutEntry {
              binding: 2,
              visibility: wgpu::ShaderStages::COMPUTE,
              ty: wgpu::BindingType::Texture {
                sample_type: wgpu::TextureSampleType::Sint,
                view_dimension: wgpu::TextureViewDimension::D2,
                multisampled: false,
              },
              count: None,
            },
            #[doc = " @binding(3): \"texture_uint\""]
            wgpu::BindGroupLayoutEntry {
              binding: 3,
              visibility: wgpu::ShaderStages::COMPUTE,
              ty: wgpu::BindingType::Texture {
                sample_type: wgpu::TextureSampleType::Uint,
                view_dimension: wgpu::TextureViewDimension::D2,
                multisampled: false,
              },
              count: None,
            },
          ],
        };
      pub fn get_bind_group_layout(device: &wgpu::Device) -> wgpu::BindGroupLayout {
        device.create_bind_group_layout(&Self::LAYOUT_DESCRIPTOR)
      }
      pub fn from_bindings(
        device: &wgpu::Device,
        bindings: WgpuBindGroup0Entries,
      ) -> Self {
        let bind_group_layout = Self::get_bind_group_layout(device);
        let entries = bindings.into_array();
        let bind_group = device.create_bind_group(&wgpu::BindGroupDescriptor {
          label: Some("BasicMain::BindGroup0"),
          layout: &bind_group_layout,
          entries: &entries,
        });
        Self(bind_group)
      }
      pub fn set(&self, pass: &mut impl SetBindGroup) {
        pass.set_bind_group(0, &self.0, &[]);
      }
    }
    #[doc = " Bind groups can be set individually using their set(render_pass) method, or all at once using `WgpuBindGroups::set`."]
    #[doc = " For optimal performance with many draw calls, it's recommended to organize bindings into bind groups based on update frequency:"]
    #[doc = "   - Bind group 0: Least frequent updates (e.g. per frame resources)"]
    #[doc = "   - Bind group 1: More frequent updates"]
    #[doc = "   - Bind group 2: More frequent updates"]
    #[doc = "   - Bind group 3: Most frequent updates (e.g. per draw resources)"]
    #[derive(Debug, Copy, Clone)]
    pub struct WgpuBindGroups<'a> {
      pub bind_group0: &'a WgpuBindGroup0,
      pub bind_group1: &'a bindings::WgpuBindGroup1,
    }
    impl<'a> WgpuBindGroups<'a> {
      pub fn set(&self, pass: &mut impl SetBindGroup) {
        self.bind_group0.set(pass);
        self.bind_group1.set(pass);
      }
    }
    #[derive(Debug)]
    pub struct WgpuPipelineLayout;
    impl WgpuPipelineLayout {
      pub fn bind_group_layout_entries(
        entries: [wgpu::BindGroupLayout; 2],
      ) -> [wgpu::BindGroupLayout; 2] {
        entries
      }
    }
    pub fn create_pipeline_layout(device: &wgpu::Device) -> wgpu::PipelineLayout {
      device.create_pipeline_layout(&wgpu::PipelineLayoutDescriptor {
        label: Some("BasicMain::PipelineLayout"),
        bind_group_layouts: &[
          &WgpuBindGroup0::get_bind_group_layout(device),
          &bindings::WgpuBindGroup1::get_bind_group_layout(device),
        ],
        push_constant_ranges: &[wgpu::PushConstantRange {
          stages: wgpu::ShaderStages::COMPUTE,
          range: 0..32,
        }],
      })
    }
    pub fn create_shader_module_embed_source(
      device: &wgpu::Device,
    ) -> wgpu::ShaderModule {
      let source = std::borrow::Cow::Borrowed(SHADER_STRING);
      device.create_shader_module(wgpu::ShaderModuleDescriptor {
        label: Some("main.wgsl"),
        source: wgpu::ShaderSource::Wgsl(source),
      })
    }
    pub const SHADER_STRING: &str = r#"
struct Style {
    color: vec4<f32>,
    width: f32,
}

@group(1) @binding(0) 
var<uniform> ONEX_naga_oil_mod_XMJUW4ZDJNZTXGX: f32;
@group(0) @binding(0) 
var<storage, read_write> buffer: array<f32>;
@group(0) @binding(1) 
var texture_float: texture_2d<f32>;
@group(0) @binding(2) 
var texture_sint: texture_2d<i32>;
@group(0) @binding(3) 
var texture_uint: texture_2d<u32>;
var<push_constant> const_style: Style;

@compute @workgroup_size(1, 1, 1) 
fn main(@builtin(global_invocation_id) id: vec3<u32>) {
    let _e5 = ONEX_naga_oil_mod_XMJUW4ZDJNZTXGX;
    let _e11 = const_style.color.w;
    let _e15 = const_style.width;
    let _e17 = buffer[id.x];
    buffer[id.x] = (_e17 * (((2f * _e5) * _e11) * _e15));
    return;
}
"#;
    pub const SHADER_ENTRY_PATH: &str = "basic/main.wgsl";
    pub fn create_shader_module_relative_path(
      device: &wgpu::Device,
      base_dir: &str,
      entry_point: ShaderEntry,
      shader_defs: std::collections::HashMap<String, naga_oil::compose::ShaderDefValue>,
      load_file: impl Fn(&str) -> Result<String, std::io::Error>,
    ) -> Result<wgpu::ShaderModule, naga_oil::compose::ComposerError> {
      let mut composer = naga_oil::compose::Composer::default()
        .with_capabilities(wgpu::naga::valid::Capabilities::PUSH_CONSTANT);
      let module = load_naga_module_from_path(
        base_dir,
        entry_point,
        &mut composer,
        shader_defs,
        load_file,
      )
      .map_err(|e| naga_oil::compose::ComposerError {
        inner: naga_oil::compose::ComposerErrorInner::ImportNotFound(e, 0),
        source: naga_oil::compose::ErrSource::Constructing {
          path: "load_naga_module_from_path".to_string(),
          source: "Generated code".to_string(),
          offset: 0,
        },
      })?;
      let shader_module = device.create_shader_module(wgpu::ShaderModuleDescriptor {
        label: Some("main.wgsl"),
        source: wgpu::ShaderSource::Naga(std::borrow::Cow::Owned(module)),
      });
      Ok(shader_module)
    }
  }
}
pub mod bytemuck_impls {
  use super::{_root, _root::*};
  unsafe impl bytemuck::Zeroable for basic::main::Style {}
  unsafe impl bytemuck::Pod for basic::main::Style {}
}
pub mod bindings {
  use super::{_root, _root::*};
  #[derive(Debug)]
  pub struct WgpuBindGroup1EntriesParams<'a> {
    pub ONE: wgpu::BufferBinding<'a>,
  }
  #[derive(Clone, Debug)]
  pub struct WgpuBindGroup1Entries<'a> {
    pub ONE: wgpu::BindGroupEntry<'a>,
  }
  impl<'a> WgpuBindGroup1Entries<'a> {
    pub fn new(params: WgpuBindGroup1EntriesParams<'a>) -> Self {
      Self {
        ONE: wgpu::BindGroupEntry {
          binding: 0,
          resource: wgpu::BindingResource::Buffer(params.ONE),
        },
      }
    }
    pub fn into_array(self) -> [wgpu::BindGroupEntry<'a>; 1] {
      [self.ONE]
    }
    pub fn collect<B: FromIterator<wgpu::BindGroupEntry<'a>>>(self) -> B {
      self.into_array().into_iter().collect()
    }
  }
  #[derive(Debug)]
  pub struct WgpuBindGroup1(wgpu::BindGroup);
  impl WgpuBindGroup1 {
    pub const LAYOUT_DESCRIPTOR: wgpu::BindGroupLayoutDescriptor<'static> =
      wgpu::BindGroupLayoutDescriptor {
        label: Some("Bindings::BindGroup1::LayoutDescriptor"),
        entries: &[
          #[doc = " @binding(0): \"_root::bindings::ONE\""]
          wgpu::BindGroupLayoutEntry {
            binding: 0,
            visibility: wgpu::ShaderStages::COMPUTE,
            ty: wgpu::BindingType::Buffer {
              ty: wgpu::BufferBindingType::Uniform,
              has_dynamic_offset: false,
              min_binding_size: std::num::NonZeroU64::new(std::mem::size_of::<f32>() as _),
            },
            count: None,
          },
        ],
      };
    pub fn get_bind_group_layout(device: &wgpu::Device) -> wgpu::BindGroupLayout {
      device.create_bind_group_layout(&Self::LAYOUT_DESCRIPTOR)
    }
    pub fn from_bindings(device: &wgpu::Device, bindings: WgpuBindGroup1Entries) -> Self {
      let bind_group_layout = Self::get_bind_group_layout(device);
      let entries = bindings.into_array();
      let bind_group = device.create_bind_group(&wgpu::BindGroupDescriptor {
        label: Some("Bindings::BindGroup1"),
        layout: &bind_group_layout,
        entries: &entries,
      });
      Self(bind_group)
    }
    pub fn set(&self, pass: &mut impl SetBindGroup) {
      pass.set_bind_group(1, &self.0, &[]);
    }
  }
}
