---
source: wgsl_bindgen/src/generate/bind_group/mod.rs
---
#[derive(Debug)]
pub struct WgpuBindGroup0EntriesParams<'a> {
  pub color_texture: &'a wgpu::TextureView,
  pub color_texture_i32: &'a wgpu::TextureView,
  pub color_texture_u32: &'a wgpu::TextureView,
  pub color_sampler: &'a wgpu::Sampler,
  pub depth_texture: &'a wgpu::TextureView,
  pub comparison_sampler: &'a wgpu::Sampler,
  pub storage_tex_read: &'a wgpu::TextureView,
  pub storage_tex_write: &'a wgpu::TextureView,
  pub storage_tex_read_write: &'a wgpu::TextureView,
  pub color_texture_msaa: &'a wgpu::TextureView,
  pub depth_texture_msaa: &'a wgpu::TextureView,
}
#[derive(Clone, Debug)]
pub struct WgpuBindGroup0Entries<'a> {
  pub color_texture: wgpu::BindGroupEntry<'a>,
  pub color_texture_i32: wgpu::BindGroupEntry<'a>,
  pub color_texture_u32: wgpu::BindGroupEntry<'a>,
  pub color_sampler: wgpu::BindGroupEntry<'a>,
  pub depth_texture: wgpu::BindGroupEntry<'a>,
  pub comparison_sampler: wgpu::BindGroupEntry<'a>,
  pub storage_tex_read: wgpu::BindGroupEntry<'a>,
  pub storage_tex_write: wgpu::BindGroupEntry<'a>,
  pub storage_tex_read_write: wgpu::BindGroupEntry<'a>,
  pub color_texture_msaa: wgpu::BindGroupEntry<'a>,
  pub depth_texture_msaa: wgpu::BindGroupEntry<'a>,
}
impl<'a> WgpuBindGroup0Entries<'a> {
  pub fn new(params: WgpuBindGroup0EntriesParams<'a>) -> Self {
    Self {
      color_texture: wgpu::BindGroupEntry {
        binding: 0,
        resource: wgpu::BindingResource::TextureView(params.color_texture),
      },
      color_texture_i32: wgpu::BindGroupEntry {
        binding: 1,
        resource: wgpu::BindingResource::TextureView(params.color_texture_i32),
      },
      color_texture_u32: wgpu::BindGroupEntry {
        binding: 2,
        resource: wgpu::BindingResource::TextureView(params.color_texture_u32),
      },
      color_sampler: wgpu::BindGroupEntry {
        binding: 3,
        resource: wgpu::BindingResource::Sampler(params.color_sampler),
      },
      depth_texture: wgpu::BindGroupEntry {
        binding: 4,
        resource: wgpu::BindingResource::TextureView(params.depth_texture),
      },
      comparison_sampler: wgpu::BindGroupEntry {
        binding: 5,
        resource: wgpu::BindingResource::Sampler(params.comparison_sampler),
      },
      storage_tex_read: wgpu::BindGroupEntry {
        binding: 6,
        resource: wgpu::BindingResource::TextureView(params.storage_tex_read),
      },
      storage_tex_write: wgpu::BindGroupEntry {
        binding: 7,
        resource: wgpu::BindingResource::TextureView(params.storage_tex_write),
      },
      storage_tex_read_write: wgpu::BindGroupEntry {
        binding: 8,
        resource: wgpu::BindingResource::TextureView(params.storage_tex_read_write),
      },
      color_texture_msaa: wgpu::BindGroupEntry {
        binding: 9,
        resource: wgpu::BindingResource::TextureView(params.color_texture_msaa),
      },
      depth_texture_msaa: wgpu::BindGroupEntry {
        binding: 10,
        resource: wgpu::BindingResource::TextureView(params.depth_texture_msaa),
      },
    }
  }
  pub fn as_array(&self) -> [wgpu::BindGroupEntry<'a>; 11] {
    [
      self.color_texture.clone(),
      self.color_texture_i32.clone(),
      self.color_texture_u32.clone(),
      self.color_sampler.clone(),
      self.depth_texture.clone(),
      self.comparison_sampler.clone(),
      self.storage_tex_read.clone(),
      self.storage_tex_write.clone(),
      self.storage_tex_read_write.clone(),
      self.color_texture_msaa.clone(),
      self.depth_texture_msaa.clone(),
    ]
  }
  pub fn collect<B: FromIterator<wgpu::BindGroupEntry<'a>>>(self) -> B {
    self.as_array().into_iter().collect()
  }
}
#[derive(Debug)]
pub struct WgpuBindGroup0(wgpu::BindGroup);
impl WgpuBindGroup0 {
  pub const LAYOUT_DESCRIPTOR: wgpu::BindGroupLayoutDescriptor<'static> =
    wgpu::BindGroupLayoutDescriptor {
      label: Some("Test::BindGroup0::LayoutDescriptor"),
      entries: &[
        #[doc = " @binding(0): \"color_texture\""]
        wgpu::BindGroupLayoutEntry {
          binding: 0,
          visibility: wgpu::ShaderStages::VERTEX_FRAGMENT,
          ty: wgpu::BindingType::Texture {
            sample_type: wgpu::TextureSampleType::Float { filterable: true },
            view_dimension: wgpu::TextureViewDimension::D2,
            multisampled: false,
          },
          count: None,
        },
        #[doc = " @binding(1): \"color_texture_i32\""]
        wgpu::BindGroupLayoutEntry {
          binding: 1,
          visibility: wgpu::ShaderStages::VERTEX_FRAGMENT,
          ty: wgpu::BindingType::Texture {
            sample_type: wgpu::TextureSampleType::Sint,
            view_dimension: wgpu::TextureViewDimension::D2,
            multisampled: false,
          },
          count: None,
        },
        #[doc = " @binding(2): \"color_texture_u32\""]
        wgpu::BindGroupLayoutEntry {
          binding: 2,
          visibility: wgpu::ShaderStages::VERTEX_FRAGMENT,
          ty: wgpu::BindingType::Texture {
            sample_type: wgpu::TextureSampleType::Uint,
            view_dimension: wgpu::TextureViewDimension::D2,
            multisampled: false,
          },
          count: None,
        },
        #[doc = " @binding(3): \"color_sampler\""]
        wgpu::BindGroupLayoutEntry {
          binding: 3,
          visibility: wgpu::ShaderStages::VERTEX_FRAGMENT,
          ty: wgpu::BindingType::Sampler(wgpu::SamplerBindingType::Filtering),
          count: None,
        },
        #[doc = " @binding(4): \"depth_texture\""]
        wgpu::BindGroupLayoutEntry {
          binding: 4,
          visibility: wgpu::ShaderStages::VERTEX_FRAGMENT,
          ty: wgpu::BindingType::Texture {
            sample_type: wgpu::TextureSampleType::Depth,
            view_dimension: wgpu::TextureViewDimension::D2,
            multisampled: false,
          },
          count: None,
        },
        #[doc = " @binding(5): \"comparison_sampler\""]
        wgpu::BindGroupLayoutEntry {
          binding: 5,
          visibility: wgpu::ShaderStages::VERTEX_FRAGMENT,
          ty: wgpu::BindingType::Sampler(wgpu::SamplerBindingType::Comparison),
          count: None,
        },
        #[doc = " @binding(6): \"storage_tex_read\""]
        wgpu::BindGroupLayoutEntry {
          binding: 6,
          visibility: wgpu::ShaderStages::VERTEX_FRAGMENT,
          ty: wgpu::BindingType::StorageTexture {
            access: wgpu::StorageTextureAccess::ReadOnly,
            format: wgpu::TextureFormat::R32Float,
            view_dimension: wgpu::TextureViewDimension::D2,
          },
          count: None,
        },
        #[doc = " @binding(7): \"storage_tex_write\""]
        wgpu::BindGroupLayoutEntry {
          binding: 7,
          visibility: wgpu::ShaderStages::VERTEX_FRAGMENT,
          ty: wgpu::BindingType::StorageTexture {
            access: wgpu::StorageTextureAccess::WriteOnly,
            format: wgpu::TextureFormat::Rg32Sint,
            view_dimension: wgpu::TextureViewDimension::D2,
          },
          count: None,
        },
        #[doc = " @binding(8): \"storage_tex_read_write\""]
        wgpu::BindGroupLayoutEntry {
          binding: 8,
          visibility: wgpu::ShaderStages::VERTEX_FRAGMENT,
          ty: wgpu::BindingType::StorageTexture {
            access: wgpu::StorageTextureAccess::ReadWrite,
            format: wgpu::TextureFormat::Rgba8Uint,
            view_dimension: wgpu::TextureViewDimension::D2,
          },
          count: None,
        },
        #[doc = " @binding(9): \"color_texture_msaa\""]
        wgpu::BindGroupLayoutEntry {
          binding: 9,
          visibility: wgpu::ShaderStages::VERTEX_FRAGMENT,
          ty: wgpu::BindingType::Texture {
            sample_type: wgpu::TextureSampleType::Float { filterable: true },
            view_dimension: wgpu::TextureViewDimension::D2,
            multisampled: true,
          },
          count: None,
        },
        #[doc = " @binding(10): \"depth_texture_msaa\""]
        wgpu::BindGroupLayoutEntry {
          binding: 10,
          visibility: wgpu::ShaderStages::VERTEX_FRAGMENT,
          ty: wgpu::BindingType::Texture {
            sample_type: wgpu::TextureSampleType::Depth,
            view_dimension: wgpu::TextureViewDimension::D2,
            multisampled: true,
          },
          count: None,
        },
      ],
    };
  pub fn get_bind_group_layout(device: &wgpu::Device) -> wgpu::BindGroupLayout {
    device.create_bind_group_layout(&Self::LAYOUT_DESCRIPTOR)
  }
  pub fn from_bindings(device: &wgpu::Device, bindings: WgpuBindGroup0Entries) -> Self {
    let bind_group_layout = Self::get_bind_group_layout(device);
    let entries = bindings.as_array();
    let bind_group = device.create_bind_group(&wgpu::BindGroupDescriptor {
      label: Some("Test::BindGroup0"),
      layout: &bind_group_layout,
      entries: &entries,
    });
    Self(bind_group)
  }
  pub fn set(&self, pass: &mut impl SetBindGroup) {
    pass.set_bind_group(0, &self.0, &[]);
  }
}
#[derive(Debug)]
pub struct WgpuBindGroup1EntriesParams<'a> {
  pub transforms: wgpu::BufferBinding<'a>,
  pub one: wgpu::BufferBinding<'a>,
}
#[derive(Clone, Debug)]
pub struct WgpuBindGroup1Entries<'a> {
  pub transforms: wgpu::BindGroupEntry<'a>,
  pub one: wgpu::BindGroupEntry<'a>,
}
impl<'a> WgpuBindGroup1Entries<'a> {
  pub fn new(params: WgpuBindGroup1EntriesParams<'a>) -> Self {
    Self {
      transforms: wgpu::BindGroupEntry {
        binding: 0,
        resource: wgpu::BindingResource::Buffer(params.transforms),
      },
      one: wgpu::BindGroupEntry {
        binding: 1,
        resource: wgpu::BindingResource::Buffer(params.one),
      },
    }
  }
  pub fn as_array(&self) -> [wgpu::BindGroupEntry<'a>; 2] {
    [self.transforms.clone(), self.one.clone()]
  }
  pub fn collect<B: FromIterator<wgpu::BindGroupEntry<'a>>>(self) -> B {
    self.as_array().into_iter().collect()
  }
}
#[derive(Debug)]
pub struct WgpuBindGroup1(wgpu::BindGroup);
impl WgpuBindGroup1 {
  pub const LAYOUT_DESCRIPTOR: wgpu::BindGroupLayoutDescriptor<'static> =
    wgpu::BindGroupLayoutDescriptor {
      label: Some("Test::BindGroup1::LayoutDescriptor"),
      entries: &[
        #[doc = " @binding(0): \"transforms\""]
        wgpu::BindGroupLayoutEntry {
          binding: 0,
          visibility: wgpu::ShaderStages::VERTEX_FRAGMENT,
          ty: wgpu::BindingType::Buffer {
            ty: wgpu::BufferBindingType::Uniform,
            has_dynamic_offset: false,
            min_binding_size: std::num::NonZeroU64::new(std::mem::size_of::<
              _root::test::Transforms,
            >() as _),
          },
          count: None,
        },
        #[doc = " @binding(1): \"one\""]
        wgpu::BindGroupLayoutEntry {
          binding: 1,
          visibility: wgpu::ShaderStages::VERTEX_FRAGMENT,
          ty: wgpu::BindingType::Buffer {
            ty: wgpu::BufferBindingType::Uniform,
            has_dynamic_offset: false,
            min_binding_size: std::num::NonZeroU64::new(std::mem::size_of::<f32>() as _),
          },
          count: None,
        },
      ],
    };
  pub fn get_bind_group_layout(device: &wgpu::Device) -> wgpu::BindGroupLayout {
    device.create_bind_group_layout(&Self::LAYOUT_DESCRIPTOR)
  }
  pub fn from_bindings(device: &wgpu::Device, bindings: WgpuBindGroup1Entries) -> Self {
    let bind_group_layout = Self::get_bind_group_layout(device);
    let entries = bindings.as_array();
    let bind_group = device.create_bind_group(&wgpu::BindGroupDescriptor {
      label: Some("Test::BindGroup1"),
      layout: &bind_group_layout,
      entries: &entries,
    });
    Self(bind_group)
  }
  pub fn set(&self, pass: &mut impl SetBindGroup) {
    pass.set_bind_group(1, &self.0, &[]);
  }
}
#[doc = " Bind groups can be set individually using their set(render_pass) method, or all at once using `WgpuBindGroups::set`."]
#[doc = " For optimal performance with many draw calls, it's recommended to organize bindings into bind groups based on update frequency:"]
#[doc = "   - Bind group 0: Least frequent updates (e.g. per frame resources)"]
#[doc = "   - Bind group 1: More frequent updates"]
#[doc = "   - Bind group 2: More frequent updates"]
#[doc = "   - Bind group 3: Most frequent updates (e.g. per draw resources)"]
#[derive(Debug, Copy, Clone)]
pub struct WgpuBindGroups<'a> {
  pub bind_group0: &'a WgpuBindGroup0,
  pub bind_group1: &'a WgpuBindGroup1,
}
impl<'a> WgpuBindGroups<'a> {
  pub fn set(&self, pass: &mut impl SetBindGroup) {
    self.bind_group0.set(pass);
    self.bind_group1.set(pass);
  }
}
