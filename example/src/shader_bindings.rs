// File automatically generated by wgsl_bindgen^
//
// ^ wgsl_bindgen version 0.19.1
// Changes made to this file will not be saved.
// SourceHash: c038af36a5b51ded87c76bd7453d368303d3798f4bb9f6f93a50d4fc56757816

#![allow(unused, non_snake_case, non_camel_case_types, non_upper_case_globals)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]
pub enum ShaderEntry {
  FullscreenEffects,
  SimpleArrayDemo,
  Overlay,
  GradientTriangle,
}
impl ShaderEntry {
  pub fn create_pipeline_layout(&self, device: &wgpu::Device) -> wgpu::PipelineLayout {
    match self {
      Self::FullscreenEffects => fullscreen_effects::create_pipeline_layout(device),
      Self::SimpleArrayDemo => simple_array_demo::create_pipeline_layout(device),
      Self::Overlay => overlay::create_pipeline_layout(device),
      Self::GradientTriangle => gradient_triangle::create_pipeline_layout(device),
    }
  }
  pub fn create_shader_module_relative_path(
    &self,
    device: &wgpu::Device,
    base_dir: &str,
    entry_point: ShaderEntry,
    shader_defs: std::collections::HashMap<String, naga_oil::compose::ShaderDefValue>,
    load_file: impl Fn(&str) -> Result<String, std::io::Error>,
  ) -> Result<wgpu::ShaderModule, naga_oil::compose::ComposerError> {
    match self {
      Self::FullscreenEffects => fullscreen_effects::create_shader_module_relative_path(
        device,
        base_dir,
        *self,
        shader_defs,
        load_file,
      ),
      Self::SimpleArrayDemo => simple_array_demo::create_shader_module_relative_path(
        device,
        base_dir,
        *self,
        shader_defs,
        load_file,
      ),
      Self::Overlay => overlay::create_shader_module_relative_path(
        device,
        base_dir,
        *self,
        shader_defs,
        load_file,
      ),
      Self::GradientTriangle => gradient_triangle::create_shader_module_relative_path(
        device,
        base_dir,
        *self,
        shader_defs,
        load_file,
      ),
    }
  }
  pub fn relative_path(&self) -> &'static str {
    match self {
      Self::FullscreenEffects => fullscreen_effects::SHADER_ENTRY_PATH,
      Self::SimpleArrayDemo => simple_array_demo::SHADER_ENTRY_PATH,
      Self::Overlay => overlay::SHADER_ENTRY_PATH,
      Self::GradientTriangle => gradient_triangle::SHADER_ENTRY_PATH,
    }
  }
}
mod _root {
  pub use super::*;
  pub fn load_naga_module_from_path(
    base_dir: &str,
    entry_point: ShaderEntry,
    composer: &mut naga_oil::compose::Composer,
    shader_defs: std::collections::HashMap<String, naga_oil::compose::ShaderDefValue>,
    load_file: impl Fn(&str) -> Result<String, std::io::Error>,
  ) -> Result<wgpu::naga::Module, String> {
    fn load_dependencies_recursive(
      base_dir: &str,
      source: &str,
      current_path: &str,
      composer: &mut naga_oil::compose::Composer,
      shader_defs: &std::collections::HashMap<String, naga_oil::compose::ShaderDefValue>,
      load_file: &impl Fn(&str) -> Result<String, std::io::Error>,
      visited: &mut std::collections::HashSet<String>,
    ) -> Result<(), String> {
      let (_, imports, _) = naga_oil::compose::get_preprocessor_data(source);
      for import in imports {
        let import_path = if import.import.starts_with('\"') {
          import
            .import
            .chars()
            .skip(1)
            .take_while(|c| *c != '\"')
            .collect::<String>()
        } else {
          let module_path = if let Some(double_colon_pos) = import.import.find("::") {
            &import.import[..double_colon_pos]
          } else {
            &import.import
          };
          format!("{module_path}.wgsl")
        };
        let full_import_path = if import_path.starts_with('/') {
          format!("{base_dir}{import_path}")
        } else {
          let current_dir = std::path::Path::new(current_path)
            .parent()
            .and_then(|p| p.to_str())
            .unwrap_or("");
          if current_dir.is_empty() {
            format!("{base_dir}/{import_path}")
          } else {
            format!("{base_dir}/{current_dir}/{import_path}")
          }
        };
        if visited.contains(&full_import_path) {
          continue;
        }
        visited.insert(full_import_path.clone());
        let import_source = load_file(&full_import_path)
          .map_err(|e| format!("Failed to load {full_import_path}: {e}"))?;
        load_dependencies_recursive(
          base_dir,
          &import_source,
          full_import_path.trim_start_matches(&format!("{base_dir}/")),
          composer,
          shader_defs,
          load_file,
          visited,
        )?;
        let relative_path = full_import_path.trim_start_matches(&format!("{base_dir}/"));
        let as_name = std::path::Path::new(relative_path)
          .file_stem()
          .and_then(|s| s.to_str())
          .map(|s| s.to_string());
        composer
          .add_composable_module(naga_oil::compose::ComposableModuleDescriptor {
            source: &import_source,
            file_path: relative_path,
            language: naga_oil::compose::ShaderLanguage::Wgsl,
            shader_defs: shader_defs.clone(),
            as_name,
            ..Default::default()
          })
          .map_err(|e| format!("Failed to add composable module: {e}"))?;
      }
      Ok(())
    }
    let entry_path = format!("{}/{}", base_dir, entry_point.relative_path());
    let entry_source = load_file(&entry_path)
      .map_err(|e| format!("Failed to load entry point {entry_path}: {e}"))?;
    let mut visited = std::collections::HashSet::new();
    load_dependencies_recursive(
      base_dir,
      &entry_source,
      entry_point.relative_path(),
      composer,
      &shader_defs,
      &load_file,
      &mut visited,
    )?;
    composer
      .make_naga_module(naga_oil::compose::NagaModuleDescriptor {
        source: &entry_source,
        file_path: entry_point.relative_path(),
        shader_defs,
        ..Default::default()
      })
      .map_err(|e| format!("Failed to create final module: {e}"))
  }
  pub trait SetBindGroup {
    fn set_bind_group(
      &mut self,
      index: u32,
      bind_group: &wgpu::BindGroup,
      offsets: &[wgpu::DynamicOffset],
    );
  }
  impl SetBindGroup for wgpu::RenderPass<'_> {
    fn set_bind_group(
      &mut self,
      index: u32,
      bind_group: &wgpu::BindGroup,
      offsets: &[wgpu::DynamicOffset],
    ) {
      self.set_bind_group(index, bind_group, offsets);
    }
  }
  impl SetBindGroup for wgpu::RenderBundleEncoder<'_> {
    fn set_bind_group(
      &mut self,
      index: u32,
      bind_group: &wgpu::BindGroup,
      offsets: &[wgpu::DynamicOffset],
    ) {
      self.set_bind_group(index, bind_group, offsets);
    }
  }
}
pub mod layout_asserts {
  use super::{_root, _root::*};
  const WGSL_BASE_TYPE_ASSERTS: () = {
    assert!(std::mem::size_of::<glam::Vec3A>() == 16);
    assert!(std::mem::align_of::<glam::Vec3A>() == 16);
    assert!(std::mem::size_of::<glam::Vec4>() == 16);
    assert!(std::mem::align_of::<glam::Vec4>() == 16);
    assert!(std::mem::size_of::<glam::Mat3A>() == 48);
    assert!(std::mem::align_of::<glam::Mat3A>() == 16);
    assert!(std::mem::size_of::<glam::Mat4>() == 64);
    assert!(std::mem::align_of::<glam::Mat4>() == 16);
  };
  const FULLSCREEN_EFFECTS_UNIFORMS_ASSERTS: () = {
    assert!(std::mem::offset_of!(fullscreen_effects::Uniforms, color_rgb) == 0);
    assert!(std::mem::size_of::<fullscreen_effects::Uniforms>() == 16);
  };
  const FULLSCREEN_EFFECTS_PUSH_CONSTANTS_ASSERTS: () = {
    assert!(std::mem::offset_of!(fullscreen_effects::PushConstants, color_matrix) == 0);
    assert!(std::mem::size_of::<fullscreen_effects::PushConstants>() == 64);
  };
  const SIMPLE_ARRAY_DEMO_UNIFORMS_ASSERTS: () = {
    assert!(std::mem::offset_of!(simple_array_demo::Uniforms, color_rgb) == 0);
    assert!(std::mem::size_of::<simple_array_demo::Uniforms>() == 16);
  };
  const SIMPLE_ARRAY_DEMO_PUSH_CONSTANTS_ASSERTS: () = {
    assert!(std::mem::offset_of!(simple_array_demo::PushConstants, color_matrix) == 0);
    assert!(std::mem::size_of::<simple_array_demo::PushConstants>() == 64);
  };
  const OVERLAY_INFO_DATA_ASSERTS: () = {
    assert!(std::mem::offset_of!(overlay::InfoData, demo_index) == 0);
    assert!(std::mem::offset_of!(overlay::InfoData, total_demos) == 4);
    assert!(std::mem::offset_of!(overlay::InfoData, time) == 8);
    assert!(std::mem::offset_of!(overlay::InfoData, scale_factor) == 12);
    assert!(std::mem::offset_of!(overlay::InfoData, window_width) == 16);
    assert!(std::mem::offset_of!(overlay::InfoData, window_height) == 20);
    assert!(std::mem::offset_of!(overlay::InfoData, padding1) == 24);
    assert!(std::mem::offset_of!(overlay::InfoData, padding2) == 28);
    assert!(std::mem::size_of::<overlay::InfoData>() == 32);
  };
}
pub mod fullscreen_effects {
  use super::{_root, _root::*};
  #[repr(C, align(16))]
  #[derive(Debug, PartialEq, Clone, Copy)]
  pub struct Uniforms {
    #[doc = " size: 16, offset: 0x0, type: `vec4<f32>`"]
    pub color_rgb: glam::Vec4,
  }
  pub const fn Uniforms(color_rgb: glam::Vec4) -> Uniforms {
    Uniforms { color_rgb }
  }
  #[repr(C)]
  #[derive(Debug, PartialEq, Clone, Copy)]
  pub struct VertexInput {
    pub position: glam::Vec3A,
  }
  pub const fn VertexInput(position: glam::Vec3A) -> VertexInput {
    VertexInput { position }
  }
  impl VertexInput {
    pub const VERTEX_ATTRIBUTES: [wgpu::VertexAttribute; 1] = [wgpu::VertexAttribute {
      format: wgpu::VertexFormat::Float32x3,
      offset: std::mem::offset_of!(Self, position) as u64,
      shader_location: 0,
    }];
    pub const fn vertex_buffer_layout(
      step_mode: wgpu::VertexStepMode,
    ) -> wgpu::VertexBufferLayout<'static> {
      wgpu::VertexBufferLayout {
        array_stride: std::mem::size_of::<Self>() as u64,
        step_mode,
        attributes: &Self::VERTEX_ATTRIBUTES,
      }
    }
  }
  #[repr(C, align(16))]
  #[derive(Debug, PartialEq, Clone, Copy)]
  pub struct PushConstants {
    #[doc = " size: 64, offset: 0x0, type: `mat4x4<f32>`"]
    pub color_matrix: glam::Mat4,
  }
  pub const fn PushConstants(color_matrix: glam::Mat4) -> PushConstants {
    PushConstants { color_matrix }
  }
  pub const ENTRY_VS_MAIN: &str = "vs_main";
  pub const ENTRY_FS_MAIN: &str = "fs_main";
  #[derive(Debug)]
  pub struct VertexEntry<const N: usize> {
    pub entry_point: &'static str,
    pub buffers: [wgpu::VertexBufferLayout<'static>; N],
    pub constants: Vec<(&'static str, f64)>,
  }
  pub fn vertex_state<'a, const N: usize>(
    module: &'a wgpu::ShaderModule,
    entry: &'a VertexEntry<N>,
  ) -> wgpu::VertexState<'a> {
    wgpu::VertexState {
      module,
      entry_point: Some(entry.entry_point),
      buffers: &entry.buffers,
      compilation_options: wgpu::PipelineCompilationOptions {
        constants: &entry.constants,
        ..Default::default()
      },
    }
  }
  pub fn vs_main_entry(vertex_input: wgpu::VertexStepMode) -> VertexEntry<1> {
    VertexEntry {
      entry_point: ENTRY_VS_MAIN,
      buffers: [VertexInput::vertex_buffer_layout(vertex_input)],
      constants: Default::default(),
    }
  }
  #[derive(Debug)]
  pub struct FragmentEntry<const N: usize> {
    pub entry_point: &'static str,
    pub targets: [Option<wgpu::ColorTargetState>; N],
    pub constants: Vec<(&'static str, f64)>,
  }
  pub fn fragment_state<'a, const N: usize>(
    module: &'a wgpu::ShaderModule,
    entry: &'a FragmentEntry<N>,
  ) -> wgpu::FragmentState<'a> {
    wgpu::FragmentState {
      module,
      entry_point: Some(entry.entry_point),
      targets: &entry.targets,
      compilation_options: wgpu::PipelineCompilationOptions {
        constants: &entry.constants,
        ..Default::default()
      },
    }
  }
  pub fn fs_main_entry(targets: [Option<wgpu::ColorTargetState>; 1]) -> FragmentEntry<1> {
    FragmentEntry {
      entry_point: ENTRY_FS_MAIN,
      targets,
      constants: Default::default(),
    }
  }
  #[derive(Debug)]
  pub struct WgpuBindGroup1EntriesParams<'a> {
    pub main_texture: &'a wgpu::TextureView,
    pub main_sampler: &'a wgpu::Sampler,
  }
  #[derive(Clone, Debug)]
  pub struct WgpuBindGroup1Entries<'a> {
    pub main_texture: wgpu::BindGroupEntry<'a>,
    pub main_sampler: wgpu::BindGroupEntry<'a>,
  }
  impl<'a> WgpuBindGroup1Entries<'a> {
    pub fn new(params: WgpuBindGroup1EntriesParams<'a>) -> Self {
      Self {
        main_texture: wgpu::BindGroupEntry {
          binding: 0,
          resource: wgpu::BindingResource::TextureView(params.main_texture),
        },
        main_sampler: wgpu::BindGroupEntry {
          binding: 1,
          resource: wgpu::BindingResource::Sampler(params.main_sampler),
        },
      }
    }
    pub fn into_array(self) -> [wgpu::BindGroupEntry<'a>; 2] {
      [self.main_texture, self.main_sampler]
    }
    pub fn collect<B: FromIterator<wgpu::BindGroupEntry<'a>>>(self) -> B {
      self.into_array().into_iter().collect()
    }
  }
  #[derive(Debug)]
  pub struct WgpuBindGroup1(wgpu::BindGroup);
  impl WgpuBindGroup1 {
    pub const LAYOUT_DESCRIPTOR: wgpu::BindGroupLayoutDescriptor<'static> =
      wgpu::BindGroupLayoutDescriptor {
        label: Some("FullscreenEffects::BindGroup1::LayoutDescriptor"),
        entries: &[
          #[doc = " @binding(0): \"main_texture\""]
          wgpu::BindGroupLayoutEntry {
            binding: 0,
            visibility: wgpu::ShaderStages::VERTEX_FRAGMENT,
            ty: wgpu::BindingType::Texture {
              sample_type: wgpu::TextureSampleType::Float { filterable: true },
              view_dimension: wgpu::TextureViewDimension::D2,
              multisampled: false,
            },
            count: None,
          },
          #[doc = " @binding(1): \"main_sampler\""]
          wgpu::BindGroupLayoutEntry {
            binding: 1,
            visibility: wgpu::ShaderStages::VERTEX_FRAGMENT,
            ty: wgpu::BindingType::Sampler(wgpu::SamplerBindingType::Filtering),
            count: None,
          },
        ],
      };
    pub fn get_bind_group_layout(device: &wgpu::Device) -> wgpu::BindGroupLayout {
      device.create_bind_group_layout(&Self::LAYOUT_DESCRIPTOR)
    }
    pub fn from_bindings(device: &wgpu::Device, bindings: WgpuBindGroup1Entries) -> Self {
      let bind_group_layout = Self::get_bind_group_layout(device);
      let entries = bindings.into_array();
      let bind_group = device.create_bind_group(&wgpu::BindGroupDescriptor {
        label: Some("FullscreenEffects::BindGroup1"),
        layout: &bind_group_layout,
        entries: &entries,
      });
      Self(bind_group)
    }
    pub fn set(&self, pass: &mut impl SetBindGroup) {
      pass.set_bind_group(1, &self.0, &[]);
    }
  }
  #[derive(Debug)]
  pub struct WgpuBindGroup2EntriesParams<'a> {
    pub uniforms: wgpu::BufferBinding<'a>,
  }
  #[derive(Clone, Debug)]
  pub struct WgpuBindGroup2Entries<'a> {
    pub uniforms: wgpu::BindGroupEntry<'a>,
  }
  impl<'a> WgpuBindGroup2Entries<'a> {
    pub fn new(params: WgpuBindGroup2EntriesParams<'a>) -> Self {
      Self {
        uniforms: wgpu::BindGroupEntry {
          binding: 0,
          resource: wgpu::BindingResource::Buffer(params.uniforms),
        },
      }
    }
    pub fn into_array(self) -> [wgpu::BindGroupEntry<'a>; 1] {
      [self.uniforms]
    }
    pub fn collect<B: FromIterator<wgpu::BindGroupEntry<'a>>>(self) -> B {
      self.into_array().into_iter().collect()
    }
  }
  #[derive(Debug)]
  pub struct WgpuBindGroup2(wgpu::BindGroup);
  impl WgpuBindGroup2 {
    pub const LAYOUT_DESCRIPTOR: wgpu::BindGroupLayoutDescriptor<'static> =
      wgpu::BindGroupLayoutDescriptor {
        label: Some("FullscreenEffects::BindGroup2::LayoutDescriptor"),
        entries: &[
          #[doc = " @binding(0): \"uniforms\""]
          wgpu::BindGroupLayoutEntry {
            binding: 0,
            visibility: wgpu::ShaderStages::VERTEX_FRAGMENT,
            ty: wgpu::BindingType::Buffer {
              ty: wgpu::BufferBindingType::Uniform,
              has_dynamic_offset: false,
              min_binding_size: std::num::NonZeroU64::new(std::mem::size_of::<
                _root::fullscreen_effects::Uniforms,
              >() as _),
            },
            count: None,
          },
        ],
      };
    pub fn get_bind_group_layout(device: &wgpu::Device) -> wgpu::BindGroupLayout {
      device.create_bind_group_layout(&Self::LAYOUT_DESCRIPTOR)
    }
    pub fn from_bindings(device: &wgpu::Device, bindings: WgpuBindGroup2Entries) -> Self {
      let bind_group_layout = Self::get_bind_group_layout(device);
      let entries = bindings.into_array();
      let bind_group = device.create_bind_group(&wgpu::BindGroupDescriptor {
        label: Some("FullscreenEffects::BindGroup2"),
        layout: &bind_group_layout,
        entries: &entries,
      });
      Self(bind_group)
    }
    pub fn set(&self, pass: &mut impl SetBindGroup) {
      pass.set_bind_group(2, &self.0, &[]);
    }
  }
  #[doc = " Bind groups can be set individually using their set(render_pass) method, or all at once using `WgpuBindGroups::set`."]
  #[doc = " For optimal performance with many draw calls, it's recommended to organize bindings into bind groups based on update frequency:"]
  #[doc = "   - Bind group 0: Least frequent updates (e.g. per frame resources)"]
  #[doc = "   - Bind group 1: More frequent updates"]
  #[doc = "   - Bind group 2: More frequent updates"]
  #[doc = "   - Bind group 3: Most frequent updates (e.g. per draw resources)"]
  #[derive(Debug, Copy, Clone)]
  pub struct WgpuBindGroups<'a> {
    pub bind_group0: &'a global_bindings::WgpuBindGroup0,
    pub bind_group1: &'a WgpuBindGroup1,
    pub bind_group2: &'a WgpuBindGroup2,
  }
  impl<'a> WgpuBindGroups<'a> {
    pub fn set(&self, pass: &mut impl SetBindGroup) {
      self.bind_group0.set(pass);
      self.bind_group1.set(pass);
      self.bind_group2.set(pass);
    }
  }
  #[derive(Debug)]
  pub struct WgpuPipelineLayout;
  impl WgpuPipelineLayout {
    pub fn bind_group_layout_entries(
      entries: [wgpu::BindGroupLayout; 3],
    ) -> [wgpu::BindGroupLayout; 3] {
      entries
    }
  }
  pub fn create_pipeline_layout(device: &wgpu::Device) -> wgpu::PipelineLayout {
    device.create_pipeline_layout(&wgpu::PipelineLayoutDescriptor {
      label: Some("FullscreenEffects::PipelineLayout"),
      bind_group_layouts: &[
        &global_bindings::WgpuBindGroup0::get_bind_group_layout(device),
        &WgpuBindGroup1::get_bind_group_layout(device),
        &WgpuBindGroup2::get_bind_group_layout(device),
      ],
      push_constant_ranges: &[wgpu::PushConstantRange {
        stages: wgpu::ShaderStages::VERTEX_FRAGMENT,
        range: 0..64,
      }],
    })
  }
  pub const SHADER_ENTRY_PATH: &str = "fullscreen_effects.wgsl";
  pub fn create_shader_module_relative_path(
    device: &wgpu::Device,
    base_dir: &str,
    entry_point: ShaderEntry,
    shader_defs: std::collections::HashMap<String, naga_oil::compose::ShaderDefValue>,
    load_file: impl Fn(&str) -> Result<String, std::io::Error>,
  ) -> Result<wgpu::ShaderModule, naga_oil::compose::ComposerError> {
    let mut composer = naga_oil::compose::Composer::default()
      .with_capabilities(wgpu::naga::valid::Capabilities::from_bits_retain(1));
    let module = load_naga_module_from_path(
      base_dir,
      entry_point,
      &mut composer,
      shader_defs,
      load_file,
    )
    .map_err(|e| naga_oil::compose::ComposerError {
      inner: naga_oil::compose::ComposerErrorInner::ImportNotFound(e, 0),
      source: naga_oil::compose::ErrSource::Constructing {
        path: "load_naga_module_from_path".to_string(),
        source: "Generated code".to_string(),
        offset: 0,
      },
    })?;
    let shader_module = device.create_shader_module(wgpu::ShaderModuleDescriptor {
      label: Some("fullscreen_effects.wgsl"),
      source: wgpu::ShaderSource::Naga(std::borrow::Cow::Owned(module)),
    });
    Ok(shader_module)
  }
}
pub mod bytemuck_impls {
  use super::{_root, _root::*};
  unsafe impl bytemuck::Zeroable for fullscreen_effects::Uniforms {}
  unsafe impl bytemuck::Pod for fullscreen_effects::Uniforms {}
  unsafe impl bytemuck::Zeroable for fullscreen_effects::VertexInput {}
  unsafe impl bytemuck::Pod for fullscreen_effects::VertexInput {}
  unsafe impl bytemuck::Zeroable for fullscreen_effects::PushConstants {}
  unsafe impl bytemuck::Pod for fullscreen_effects::PushConstants {}
  unsafe impl bytemuck::Zeroable for simple_array_demo::Uniforms {}
  unsafe impl bytemuck::Pod for simple_array_demo::Uniforms {}
  unsafe impl bytemuck::Zeroable for simple_array_demo::VertexInput {}
  unsafe impl bytemuck::Pod for simple_array_demo::VertexInput {}
  unsafe impl bytemuck::Zeroable for simple_array_demo::PushConstants {}
  unsafe impl bytemuck::Pod for simple_array_demo::PushConstants {}
  unsafe impl bytemuck::Zeroable for overlay::InfoData {}
  unsafe impl bytemuck::Pod for overlay::InfoData {}
  unsafe impl bytemuck::Zeroable for gradient_triangle::VertexInput {}
  unsafe impl bytemuck::Pod for gradient_triangle::VertexInput {}
}
pub mod simple_array_demo {
  use super::{_root, _root::*};
  #[repr(C, align(16))]
  #[derive(Debug, PartialEq, Clone, Copy)]
  pub struct Uniforms {
    #[doc = " size: 16, offset: 0x0, type: `vec4<f32>`"]
    pub color_rgb: glam::Vec4,
  }
  pub const fn Uniforms(color_rgb: glam::Vec4) -> Uniforms {
    Uniforms { color_rgb }
  }
  #[repr(C)]
  #[derive(Debug, PartialEq, Clone, Copy)]
  pub struct VertexInput {
    pub position: glam::Vec3A,
  }
  pub const fn VertexInput(position: glam::Vec3A) -> VertexInput {
    VertexInput { position }
  }
  impl VertexInput {
    pub const VERTEX_ATTRIBUTES: [wgpu::VertexAttribute; 1] = [wgpu::VertexAttribute {
      format: wgpu::VertexFormat::Float32x3,
      offset: std::mem::offset_of!(Self, position) as u64,
      shader_location: 0,
    }];
    pub const fn vertex_buffer_layout(
      step_mode: wgpu::VertexStepMode,
    ) -> wgpu::VertexBufferLayout<'static> {
      wgpu::VertexBufferLayout {
        array_stride: std::mem::size_of::<Self>() as u64,
        step_mode,
        attributes: &Self::VERTEX_ATTRIBUTES,
      }
    }
  }
  #[repr(C, align(16))]
  #[derive(Debug, PartialEq, Clone, Copy)]
  pub struct PushConstants {
    #[doc = " size: 64, offset: 0x0, type: `mat4x4<f32>`"]
    pub color_matrix: glam::Mat4,
  }
  pub const fn PushConstants(color_matrix: glam::Mat4) -> PushConstants {
    PushConstants { color_matrix }
  }
  pub const ENTRY_VS_MAIN: &str = "vs_main";
  pub const ENTRY_FS_MAIN: &str = "fs_main";
  #[derive(Debug)]
  pub struct VertexEntry<const N: usize> {
    pub entry_point: &'static str,
    pub buffers: [wgpu::VertexBufferLayout<'static>; N],
    pub constants: Vec<(&'static str, f64)>,
  }
  pub fn vertex_state<'a, const N: usize>(
    module: &'a wgpu::ShaderModule,
    entry: &'a VertexEntry<N>,
  ) -> wgpu::VertexState<'a> {
    wgpu::VertexState {
      module,
      entry_point: Some(entry.entry_point),
      buffers: &entry.buffers,
      compilation_options: wgpu::PipelineCompilationOptions {
        constants: &entry.constants,
        ..Default::default()
      },
    }
  }
  pub fn vs_main_entry(vertex_input: wgpu::VertexStepMode) -> VertexEntry<1> {
    VertexEntry {
      entry_point: ENTRY_VS_MAIN,
      buffers: [VertexInput::vertex_buffer_layout(vertex_input)],
      constants: Default::default(),
    }
  }
  #[derive(Debug)]
  pub struct FragmentEntry<const N: usize> {
    pub entry_point: &'static str,
    pub targets: [Option<wgpu::ColorTargetState>; N],
    pub constants: Vec<(&'static str, f64)>,
  }
  pub fn fragment_state<'a, const N: usize>(
    module: &'a wgpu::ShaderModule,
    entry: &'a FragmentEntry<N>,
  ) -> wgpu::FragmentState<'a> {
    wgpu::FragmentState {
      module,
      entry_point: Some(entry.entry_point),
      targets: &entry.targets,
      compilation_options: wgpu::PipelineCompilationOptions {
        constants: &entry.constants,
        ..Default::default()
      },
    }
  }
  pub fn fs_main_entry(targets: [Option<wgpu::ColorTargetState>; 1]) -> FragmentEntry<1> {
    FragmentEntry {
      entry_point: ENTRY_FS_MAIN,
      targets,
      constants: Default::default(),
    }
  }
  #[derive(Debug)]
  pub struct WgpuBindGroup1EntriesParams<'a> {
    pub texture_array: &'a [&'a wgpu::TextureView],
    pub sampler_array: &'a [&'a wgpu::Sampler],
  }
  #[derive(Clone, Debug)]
  pub struct WgpuBindGroup1Entries<'a> {
    pub texture_array: wgpu::BindGroupEntry<'a>,
    pub sampler_array: wgpu::BindGroupEntry<'a>,
  }
  impl<'a> WgpuBindGroup1Entries<'a> {
    pub fn new(params: WgpuBindGroup1EntriesParams<'a>) -> Self {
      Self {
        texture_array: wgpu::BindGroupEntry {
          binding: 0,
          resource: wgpu::BindingResource::TextureViewArray(params.texture_array),
        },
        sampler_array: wgpu::BindGroupEntry {
          binding: 1,
          resource: wgpu::BindingResource::SamplerArray(params.sampler_array),
        },
      }
    }
    pub fn into_array(self) -> [wgpu::BindGroupEntry<'a>; 2] {
      [self.texture_array, self.sampler_array]
    }
    pub fn collect<B: FromIterator<wgpu::BindGroupEntry<'a>>>(self) -> B {
      self.into_array().into_iter().collect()
    }
  }
  #[derive(Debug)]
  pub struct WgpuBindGroup1(wgpu::BindGroup);
  impl WgpuBindGroup1 {
    pub const LAYOUT_DESCRIPTOR: wgpu::BindGroupLayoutDescriptor<'static> =
      wgpu::BindGroupLayoutDescriptor {
        label: Some("SimpleArrayDemo::BindGroup1::LayoutDescriptor"),
        entries: &[
          #[doc = " @binding(0): \"texture_array\""]
          wgpu::BindGroupLayoutEntry {
            binding: 0,
            visibility: wgpu::ShaderStages::VERTEX_FRAGMENT,
            ty: wgpu::BindingType::Texture {
              sample_type: wgpu::TextureSampleType::Float { filterable: true },
              view_dimension: wgpu::TextureViewDimension::D2,
              multisampled: false,
            },
            count: Some(std::num::NonZeroU32::new(2u32).unwrap()),
          },
          #[doc = " @binding(1): \"sampler_array\""]
          wgpu::BindGroupLayoutEntry {
            binding: 1,
            visibility: wgpu::ShaderStages::VERTEX_FRAGMENT,
            ty: wgpu::BindingType::Sampler(wgpu::SamplerBindingType::Filtering),
            count: Some(std::num::NonZeroU32::new(2u32).unwrap()),
          },
        ],
      };
    pub fn get_bind_group_layout(device: &wgpu::Device) -> wgpu::BindGroupLayout {
      device.create_bind_group_layout(&Self::LAYOUT_DESCRIPTOR)
    }
    pub fn from_bindings(device: &wgpu::Device, bindings: WgpuBindGroup1Entries) -> Self {
      let bind_group_layout = Self::get_bind_group_layout(device);
      let entries = bindings.into_array();
      let bind_group = device.create_bind_group(&wgpu::BindGroupDescriptor {
        label: Some("SimpleArrayDemo::BindGroup1"),
        layout: &bind_group_layout,
        entries: &entries,
      });
      Self(bind_group)
    }
    pub fn set(&self, pass: &mut impl SetBindGroup) {
      pass.set_bind_group(1, &self.0, &[]);
    }
  }
  #[derive(Debug)]
  pub struct WgpuBindGroup2EntriesParams<'a> {
    pub uniforms: wgpu::BufferBinding<'a>,
  }
  #[derive(Clone, Debug)]
  pub struct WgpuBindGroup2Entries<'a> {
    pub uniforms: wgpu::BindGroupEntry<'a>,
  }
  impl<'a> WgpuBindGroup2Entries<'a> {
    pub fn new(params: WgpuBindGroup2EntriesParams<'a>) -> Self {
      Self {
        uniforms: wgpu::BindGroupEntry {
          binding: 0,
          resource: wgpu::BindingResource::Buffer(params.uniforms),
        },
      }
    }
    pub fn into_array(self) -> [wgpu::BindGroupEntry<'a>; 1] {
      [self.uniforms]
    }
    pub fn collect<B: FromIterator<wgpu::BindGroupEntry<'a>>>(self) -> B {
      self.into_array().into_iter().collect()
    }
  }
  #[derive(Debug)]
  pub struct WgpuBindGroup2(wgpu::BindGroup);
  impl WgpuBindGroup2 {
    pub const LAYOUT_DESCRIPTOR: wgpu::BindGroupLayoutDescriptor<'static> =
      wgpu::BindGroupLayoutDescriptor {
        label: Some("SimpleArrayDemo::BindGroup2::LayoutDescriptor"),
        entries: &[
          #[doc = " @binding(0): \"uniforms\""]
          wgpu::BindGroupLayoutEntry {
            binding: 0,
            visibility: wgpu::ShaderStages::VERTEX_FRAGMENT,
            ty: wgpu::BindingType::Buffer {
              ty: wgpu::BufferBindingType::Uniform,
              has_dynamic_offset: false,
              min_binding_size: std::num::NonZeroU64::new(std::mem::size_of::<
                _root::simple_array_demo::Uniforms,
              >() as _),
            },
            count: None,
          },
        ],
      };
    pub fn get_bind_group_layout(device: &wgpu::Device) -> wgpu::BindGroupLayout {
      device.create_bind_group_layout(&Self::LAYOUT_DESCRIPTOR)
    }
    pub fn from_bindings(device: &wgpu::Device, bindings: WgpuBindGroup2Entries) -> Self {
      let bind_group_layout = Self::get_bind_group_layout(device);
      let entries = bindings.into_array();
      let bind_group = device.create_bind_group(&wgpu::BindGroupDescriptor {
        label: Some("SimpleArrayDemo::BindGroup2"),
        layout: &bind_group_layout,
        entries: &entries,
      });
      Self(bind_group)
    }
    pub fn set(&self, pass: &mut impl SetBindGroup) {
      pass.set_bind_group(2, &self.0, &[]);
    }
  }
  #[doc = " Bind groups can be set individually using their set(render_pass) method, or all at once using `WgpuBindGroups::set`."]
  #[doc = " For optimal performance with many draw calls, it's recommended to organize bindings into bind groups based on update frequency:"]
  #[doc = "   - Bind group 0: Least frequent updates (e.g. per frame resources)"]
  #[doc = "   - Bind group 1: More frequent updates"]
  #[doc = "   - Bind group 2: More frequent updates"]
  #[doc = "   - Bind group 3: Most frequent updates (e.g. per draw resources)"]
  #[derive(Debug, Copy, Clone)]
  pub struct WgpuBindGroups<'a> {
    pub bind_group0: &'a global_bindings::WgpuBindGroup0,
    pub bind_group1: &'a WgpuBindGroup1,
    pub bind_group2: &'a WgpuBindGroup2,
  }
  impl<'a> WgpuBindGroups<'a> {
    pub fn set(&self, pass: &mut impl SetBindGroup) {
      self.bind_group0.set(pass);
      self.bind_group1.set(pass);
      self.bind_group2.set(pass);
    }
  }
  #[derive(Debug)]
  pub struct WgpuPipelineLayout;
  impl WgpuPipelineLayout {
    pub fn bind_group_layout_entries(
      entries: [wgpu::BindGroupLayout; 3],
    ) -> [wgpu::BindGroupLayout; 3] {
      entries
    }
  }
  pub fn create_pipeline_layout(device: &wgpu::Device) -> wgpu::PipelineLayout {
    device.create_pipeline_layout(&wgpu::PipelineLayoutDescriptor {
      label: Some("SimpleArrayDemo::PipelineLayout"),
      bind_group_layouts: &[
        &global_bindings::WgpuBindGroup0::get_bind_group_layout(device),
        &WgpuBindGroup1::get_bind_group_layout(device),
        &WgpuBindGroup2::get_bind_group_layout(device),
      ],
      push_constant_ranges: &[wgpu::PushConstantRange {
        stages: wgpu::ShaderStages::VERTEX_FRAGMENT,
        range: 0..64,
      }],
    })
  }
  pub const SHADER_ENTRY_PATH: &str = "simple_array_demo.wgsl";
  pub fn create_shader_module_relative_path(
    device: &wgpu::Device,
    base_dir: &str,
    entry_point: ShaderEntry,
    shader_defs: std::collections::HashMap<String, naga_oil::compose::ShaderDefValue>,
    load_file: impl Fn(&str) -> Result<String, std::io::Error>,
  ) -> Result<wgpu::ShaderModule, naga_oil::compose::ComposerError> {
    let mut composer = naga_oil::compose::Composer::default()
      .with_capabilities(wgpu::naga::valid::Capabilities::from_bits_retain(1));
    let module = load_naga_module_from_path(
      base_dir,
      entry_point,
      &mut composer,
      shader_defs,
      load_file,
    )
    .map_err(|e| naga_oil::compose::ComposerError {
      inner: naga_oil::compose::ComposerErrorInner::ImportNotFound(e, 0),
      source: naga_oil::compose::ErrSource::Constructing {
        path: "load_naga_module_from_path".to_string(),
        source: "Generated code".to_string(),
        offset: 0,
      },
    })?;
    let shader_module = device.create_shader_module(wgpu::ShaderModuleDescriptor {
      label: Some("simple_array_demo.wgsl"),
      source: wgpu::ShaderSource::Naga(std::borrow::Cow::Owned(module)),
    });
    Ok(shader_module)
  }
}
pub mod overlay {
  use super::{_root, _root::*};
  #[repr(C, align(4))]
  #[derive(Debug, PartialEq, Clone, Copy)]
  pub struct InfoData {
    #[doc = " size: 4, offset: 0x0, type: `f32`"]
    pub demo_index: f32,
    #[doc = " size: 4, offset: 0x4, type: `f32`"]
    pub total_demos: f32,
    #[doc = " size: 4, offset: 0x8, type: `f32`"]
    pub time: f32,
    #[doc = " size: 4, offset: 0xC, type: `f32`"]
    pub scale_factor: f32,
    #[doc = " size: 4, offset: 0x10, type: `f32`"]
    pub window_width: f32,
    #[doc = " size: 4, offset: 0x14, type: `f32`"]
    pub window_height: f32,
    #[doc = " size: 4, offset: 0x18, type: `f32`"]
    pub padding1: f32,
    #[doc = " size: 4, offset: 0x1C, type: `f32`"]
    pub padding2: f32,
  }
  impl InfoData {
    pub const fn new(
      demo_index: f32,
      total_demos: f32,
      time: f32,
      scale_factor: f32,
      window_width: f32,
      window_height: f32,
      padding1: f32,
      padding2: f32,
    ) -> Self {
      Self {
        demo_index,
        total_demos,
        time,
        scale_factor,
        window_width,
        window_height,
        padding1,
        padding2,
      }
    }
  }
  pub const ENTRY_VS_MAIN: &str = "vs_main";
  pub const ENTRY_FS_MAIN: &str = "fs_main";
  #[derive(Debug)]
  pub struct VertexEntry<const N: usize> {
    pub entry_point: &'static str,
    pub buffers: [wgpu::VertexBufferLayout<'static>; N],
    pub constants: Vec<(&'static str, f64)>,
  }
  pub fn vertex_state<'a, const N: usize>(
    module: &'a wgpu::ShaderModule,
    entry: &'a VertexEntry<N>,
  ) -> wgpu::VertexState<'a> {
    wgpu::VertexState {
      module,
      entry_point: Some(entry.entry_point),
      buffers: &entry.buffers,
      compilation_options: wgpu::PipelineCompilationOptions {
        constants: &entry.constants,
        ..Default::default()
      },
    }
  }
  pub fn vs_main_entry() -> VertexEntry<0> {
    VertexEntry {
      entry_point: ENTRY_VS_MAIN,
      buffers: [],
      constants: Default::default(),
    }
  }
  #[derive(Debug)]
  pub struct FragmentEntry<const N: usize> {
    pub entry_point: &'static str,
    pub targets: [Option<wgpu::ColorTargetState>; N],
    pub constants: Vec<(&'static str, f64)>,
  }
  pub fn fragment_state<'a, const N: usize>(
    module: &'a wgpu::ShaderModule,
    entry: &'a FragmentEntry<N>,
  ) -> wgpu::FragmentState<'a> {
    wgpu::FragmentState {
      module,
      entry_point: Some(entry.entry_point),
      targets: &entry.targets,
      compilation_options: wgpu::PipelineCompilationOptions {
        constants: &entry.constants,
        ..Default::default()
      },
    }
  }
  pub fn fs_main_entry(targets: [Option<wgpu::ColorTargetState>; 1]) -> FragmentEntry<1> {
    FragmentEntry {
      entry_point: ENTRY_FS_MAIN,
      targets,
      constants: Default::default(),
    }
  }
  #[derive(Debug)]
  pub struct WgpuBindGroup0EntriesParams<'a> {
    pub info: wgpu::BufferBinding<'a>,
    pub text_texture: &'a wgpu::TextureView,
    pub text_sampler: &'a wgpu::Sampler,
  }
  #[derive(Clone, Debug)]
  pub struct WgpuBindGroup0Entries<'a> {
    pub info: wgpu::BindGroupEntry<'a>,
    pub text_texture: wgpu::BindGroupEntry<'a>,
    pub text_sampler: wgpu::BindGroupEntry<'a>,
  }
  impl<'a> WgpuBindGroup0Entries<'a> {
    pub fn new(params: WgpuBindGroup0EntriesParams<'a>) -> Self {
      Self {
        info: wgpu::BindGroupEntry {
          binding: 0,
          resource: wgpu::BindingResource::Buffer(params.info),
        },
        text_texture: wgpu::BindGroupEntry {
          binding: 1,
          resource: wgpu::BindingResource::TextureView(params.text_texture),
        },
        text_sampler: wgpu::BindGroupEntry {
          binding: 2,
          resource: wgpu::BindingResource::Sampler(params.text_sampler),
        },
      }
    }
    pub fn into_array(self) -> [wgpu::BindGroupEntry<'a>; 3] {
      [self.info, self.text_texture, self.text_sampler]
    }
    pub fn collect<B: FromIterator<wgpu::BindGroupEntry<'a>>>(self) -> B {
      self.into_array().into_iter().collect()
    }
  }
  #[derive(Debug)]
  pub struct WgpuBindGroup0(wgpu::BindGroup);
  impl WgpuBindGroup0 {
    pub const LAYOUT_DESCRIPTOR: wgpu::BindGroupLayoutDescriptor<'static> =
      wgpu::BindGroupLayoutDescriptor {
        label: Some("Overlay::BindGroup0::LayoutDescriptor"),
        entries: &[
          #[doc = " @binding(0): \"info\""]
          wgpu::BindGroupLayoutEntry {
            binding: 0,
            visibility: wgpu::ShaderStages::VERTEX_FRAGMENT,
            ty: wgpu::BindingType::Buffer {
              ty: wgpu::BufferBindingType::Uniform,
              has_dynamic_offset: false,
              min_binding_size: std::num::NonZeroU64::new(std::mem::size_of::<
                _root::overlay::InfoData,
              >() as _),
            },
            count: None,
          },
          #[doc = " @binding(1): \"text_texture\""]
          wgpu::BindGroupLayoutEntry {
            binding: 1,
            visibility: wgpu::ShaderStages::VERTEX_FRAGMENT,
            ty: wgpu::BindingType::Texture {
              sample_type: wgpu::TextureSampleType::Float { filterable: true },
              view_dimension: wgpu::TextureViewDimension::D2,
              multisampled: false,
            },
            count: None,
          },
          #[doc = " @binding(2): \"text_sampler\""]
          wgpu::BindGroupLayoutEntry {
            binding: 2,
            visibility: wgpu::ShaderStages::VERTEX_FRAGMENT,
            ty: wgpu::BindingType::Sampler(wgpu::SamplerBindingType::Filtering),
            count: None,
          },
        ],
      };
    pub fn get_bind_group_layout(device: &wgpu::Device) -> wgpu::BindGroupLayout {
      device.create_bind_group_layout(&Self::LAYOUT_DESCRIPTOR)
    }
    pub fn from_bindings(device: &wgpu::Device, bindings: WgpuBindGroup0Entries) -> Self {
      let bind_group_layout = Self::get_bind_group_layout(device);
      let entries = bindings.into_array();
      let bind_group = device.create_bind_group(&wgpu::BindGroupDescriptor {
        label: Some("Overlay::BindGroup0"),
        layout: &bind_group_layout,
        entries: &entries,
      });
      Self(bind_group)
    }
    pub fn set(&self, pass: &mut impl SetBindGroup) {
      pass.set_bind_group(0, &self.0, &[]);
    }
  }
  #[doc = " Bind groups can be set individually using their set(render_pass) method, or all at once using `WgpuBindGroups::set`."]
  #[doc = " For optimal performance with many draw calls, it's recommended to organize bindings into bind groups based on update frequency:"]
  #[doc = "   - Bind group 0: Least frequent updates (e.g. per frame resources)"]
  #[doc = "   - Bind group 1: More frequent updates"]
  #[doc = "   - Bind group 2: More frequent updates"]
  #[doc = "   - Bind group 3: Most frequent updates (e.g. per draw resources)"]
  #[derive(Debug, Copy, Clone)]
  pub struct WgpuBindGroups<'a> {
    pub bind_group0: &'a WgpuBindGroup0,
  }
  impl<'a> WgpuBindGroups<'a> {
    pub fn set(&self, pass: &mut impl SetBindGroup) {
      self.bind_group0.set(pass);
    }
  }
  #[derive(Debug)]
  pub struct WgpuPipelineLayout;
  impl WgpuPipelineLayout {
    pub fn bind_group_layout_entries(
      entries: [wgpu::BindGroupLayout; 1],
    ) -> [wgpu::BindGroupLayout; 1] {
      entries
    }
  }
  pub fn create_pipeline_layout(device: &wgpu::Device) -> wgpu::PipelineLayout {
    device.create_pipeline_layout(&wgpu::PipelineLayoutDescriptor {
      label: Some("Overlay::PipelineLayout"),
      bind_group_layouts: &[&WgpuBindGroup0::get_bind_group_layout(device)],
      push_constant_ranges: &[],
    })
  }
  pub const SHADER_ENTRY_PATH: &str = "overlay.wgsl";
  pub fn create_shader_module_relative_path(
    device: &wgpu::Device,
    base_dir: &str,
    entry_point: ShaderEntry,
    shader_defs: std::collections::HashMap<String, naga_oil::compose::ShaderDefValue>,
    load_file: impl Fn(&str) -> Result<String, std::io::Error>,
  ) -> Result<wgpu::ShaderModule, naga_oil::compose::ComposerError> {
    let mut composer = naga_oil::compose::Composer::default()
      .with_capabilities(wgpu::naga::valid::Capabilities::from_bits_retain(1));
    let module = load_naga_module_from_path(
      base_dir,
      entry_point,
      &mut composer,
      shader_defs,
      load_file,
    )
    .map_err(|e| naga_oil::compose::ComposerError {
      inner: naga_oil::compose::ComposerErrorInner::ImportNotFound(e, 0),
      source: naga_oil::compose::ErrSource::Constructing {
        path: "load_naga_module_from_path".to_string(),
        source: "Generated code".to_string(),
        offset: 0,
      },
    })?;
    let shader_module = device.create_shader_module(wgpu::ShaderModuleDescriptor {
      label: Some("overlay.wgsl"),
      source: wgpu::ShaderSource::Naga(std::borrow::Cow::Owned(module)),
    });
    Ok(shader_module)
  }
}
pub mod gradient_triangle {
  use super::{_root, _root::*};
  #[repr(C)]
  #[derive(Debug, PartialEq, Clone, Copy)]
  pub struct VertexInput {
    pub position: glam::Vec3A,
    pub texture_id: u32,
  }
  pub const fn VertexInput(position: glam::Vec3A, texture_id: u32) -> VertexInput {
    VertexInput {
      position,
      texture_id,
    }
  }
  impl VertexInput {
    pub const VERTEX_ATTRIBUTES: [wgpu::VertexAttribute; 2] = [
      wgpu::VertexAttribute {
        format: wgpu::VertexFormat::Float32x3,
        offset: std::mem::offset_of!(Self, position) as u64,
        shader_location: 0,
      },
      wgpu::VertexAttribute {
        format: wgpu::VertexFormat::Uint32,
        offset: std::mem::offset_of!(Self, texture_id) as u64,
        shader_location: 1,
      },
    ];
    pub const fn vertex_buffer_layout(
      step_mode: wgpu::VertexStepMode,
    ) -> wgpu::VertexBufferLayout<'static> {
      wgpu::VertexBufferLayout {
        array_stride: std::mem::size_of::<Self>() as u64,
        step_mode,
        attributes: &Self::VERTEX_ATTRIBUTES,
      }
    }
  }
  pub const ENTRY_VS_MAIN: &str = "vs_main";
  pub const ENTRY_FS_MAIN: &str = "fs_main";
  #[derive(Debug)]
  pub struct VertexEntry<const N: usize> {
    pub entry_point: &'static str,
    pub buffers: [wgpu::VertexBufferLayout<'static>; N],
    pub constants: Vec<(&'static str, f64)>,
  }
  pub fn vertex_state<'a, const N: usize>(
    module: &'a wgpu::ShaderModule,
    entry: &'a VertexEntry<N>,
  ) -> wgpu::VertexState<'a> {
    wgpu::VertexState {
      module,
      entry_point: Some(entry.entry_point),
      buffers: &entry.buffers,
      compilation_options: wgpu::PipelineCompilationOptions {
        constants: &entry.constants,
        ..Default::default()
      },
    }
  }
  pub fn vs_main_entry(vertex_input: wgpu::VertexStepMode) -> VertexEntry<1> {
    VertexEntry {
      entry_point: ENTRY_VS_MAIN,
      buffers: [VertexInput::vertex_buffer_layout(vertex_input)],
      constants: Default::default(),
    }
  }
  #[derive(Debug)]
  pub struct FragmentEntry<const N: usize> {
    pub entry_point: &'static str,
    pub targets: [Option<wgpu::ColorTargetState>; N],
    pub constants: Vec<(&'static str, f64)>,
  }
  pub fn fragment_state<'a, const N: usize>(
    module: &'a wgpu::ShaderModule,
    entry: &'a FragmentEntry<N>,
  ) -> wgpu::FragmentState<'a> {
    wgpu::FragmentState {
      module,
      entry_point: Some(entry.entry_point),
      targets: &entry.targets,
      compilation_options: wgpu::PipelineCompilationOptions {
        constants: &entry.constants,
        ..Default::default()
      },
    }
  }
  pub fn fs_main_entry(targets: [Option<wgpu::ColorTargetState>; 1]) -> FragmentEntry<1> {
    FragmentEntry {
      entry_point: ENTRY_FS_MAIN,
      targets,
      constants: Default::default(),
    }
  }
  #[derive(Debug)]
  pub struct WgpuPipelineLayout;
  impl WgpuPipelineLayout {
    pub fn bind_group_layout_entries(
      entries: [wgpu::BindGroupLayout; 0],
    ) -> [wgpu::BindGroupLayout; 0] {
      entries
    }
  }
  pub fn create_pipeline_layout(device: &wgpu::Device) -> wgpu::PipelineLayout {
    device.create_pipeline_layout(&wgpu::PipelineLayoutDescriptor {
      label: Some("GradientTriangle::PipelineLayout"),
      bind_group_layouts: &[],
      push_constant_ranges: &[],
    })
  }
  pub const SHADER_ENTRY_PATH: &str = "gradient_triangle.wgsl";
  pub fn create_shader_module_relative_path(
    device: &wgpu::Device,
    base_dir: &str,
    entry_point: ShaderEntry,
    shader_defs: std::collections::HashMap<String, naga_oil::compose::ShaderDefValue>,
    load_file: impl Fn(&str) -> Result<String, std::io::Error>,
  ) -> Result<wgpu::ShaderModule, naga_oil::compose::ComposerError> {
    let mut composer = naga_oil::compose::Composer::default()
      .with_capabilities(wgpu::naga::valid::Capabilities::from_bits_retain(1));
    let module = load_naga_module_from_path(
      base_dir,
      entry_point,
      &mut composer,
      shader_defs,
      load_file,
    )
    .map_err(|e| naga_oil::compose::ComposerError {
      inner: naga_oil::compose::ComposerErrorInner::ImportNotFound(e, 0),
      source: naga_oil::compose::ErrSource::Constructing {
        path: "load_naga_module_from_path".to_string(),
        source: "Generated code".to_string(),
        offset: 0,
      },
    })?;
    let shader_module = device.create_shader_module(wgpu::ShaderModuleDescriptor {
      label: Some("gradient_triangle.wgsl"),
      source: wgpu::ShaderSource::Naga(std::borrow::Cow::Owned(module)),
    });
    Ok(shader_module)
  }
}
pub mod global_bindings {
  use super::{_root, _root::*};
  #[derive(Debug)]
  pub struct WgpuBindGroup0EntriesParams<'a> {
    pub time: wgpu::BufferBinding<'a>,
  }
  #[derive(Clone, Debug)]
  pub struct WgpuBindGroup0Entries<'a> {
    pub time: wgpu::BindGroupEntry<'a>,
  }
  impl<'a> WgpuBindGroup0Entries<'a> {
    pub fn new(params: WgpuBindGroup0EntriesParams<'a>) -> Self {
      Self {
        time: wgpu::BindGroupEntry {
          binding: 0,
          resource: wgpu::BindingResource::Buffer(params.time),
        },
      }
    }
    pub fn into_array(self) -> [wgpu::BindGroupEntry<'a>; 1] {
      [self.time]
    }
    pub fn collect<B: FromIterator<wgpu::BindGroupEntry<'a>>>(self) -> B {
      self.into_array().into_iter().collect()
    }
  }
  #[derive(Debug)]
  pub struct WgpuBindGroup0(wgpu::BindGroup);
  impl WgpuBindGroup0 {
    pub const LAYOUT_DESCRIPTOR: wgpu::BindGroupLayoutDescriptor<'static> =
      wgpu::BindGroupLayoutDescriptor {
        label: Some("GlobalBindings::BindGroup0::LayoutDescriptor"),
        entries: &[
          #[doc = " @binding(0): \"_root::global_bindings::time\""]
          wgpu::BindGroupLayoutEntry {
            binding: 0,
            visibility: wgpu::ShaderStages::VERTEX_FRAGMENT,
            ty: wgpu::BindingType::Buffer {
              ty: wgpu::BufferBindingType::Uniform,
              has_dynamic_offset: false,
              min_binding_size: std::num::NonZeroU64::new(std::mem::size_of::<f32>() as _),
            },
            count: None,
          },
        ],
      };
    pub fn get_bind_group_layout(device: &wgpu::Device) -> wgpu::BindGroupLayout {
      device.create_bind_group_layout(&Self::LAYOUT_DESCRIPTOR)
    }
    pub fn from_bindings(device: &wgpu::Device, bindings: WgpuBindGroup0Entries) -> Self {
      let bind_group_layout = Self::get_bind_group_layout(device);
      let entries = bindings.into_array();
      let bind_group = device.create_bind_group(&wgpu::BindGroupDescriptor {
        label: Some("GlobalBindings::BindGroup0"),
        layout: &bind_group_layout,
        entries: &entries,
      });
      Self(bind_group)
    }
    pub fn set(&self, pass: &mut impl SetBindGroup) {
      pass.set_bind_group(0, &self.0, &[]);
    }
  }
}
