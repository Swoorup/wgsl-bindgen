/// A very simple text renderer that creates a texture with text
/// This is a minimal implementation for demo purposes

pub const CHAR_WIDTH: u32 = 8;
pub const CHAR_HEIGHT: u32 = 16;
pub const TEXTURE_WIDTH: u32 = 1024;
pub const TEXTURE_HEIGHT: u32 = 256;

/// Simple ASCII bitmap font (only uppercase letters, numbers, and basic symbols)
/// Each character is 8x16 pixels, stored as 16 bytes (1 bit per pixel)
fn get_char_bitmap(c: char) -> Option<&'static [u8; 16]> {
    match c {
        'A' => Some(&[
            0b00111100,
            0b01100110,
            0b01100110,
            0b01100110,
            0b01111110,
            0b01100110,
            0b01100110,
            0b01100110,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
        ]),
        'B' => Some(&[
            0b01111100,
            0b01100110,
            0b01100110,
            0b01111100,
            0b01100110,
            0b01100110,
            0b01100110,
            0b01111100,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
        ]),
        'C' => Some(&[
            0b00111100,
            0b01100110,
            0b01100000,
            0b01100000,
            0b01100000,
            0b01100000,
            0b01100110,
            0b00111100,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
        ]),
        'D' => Some(&[
            0b01111100,
            0b01100110,
            0b01100110,
            0b01100110,
            0b01100110,
            0b01100110,
            0b01100110,
            0b01111100,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
        ]),
        'E' => Some(&[
            0b01111110,
            0b01100000,
            0b01100000,
            0b01111100,
            0b01100000,
            0b01100000,
            0b01100000,
            0b01111110,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
        ]),
        'H' => Some(&[
            0b01100110,
            0b01100110,
            0b01100110,
            0b01111110,
            0b01100110,
            0b01100110,
            0b01100110,
            0b01100110,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
        ]),
        'S' => Some(&[
            0b00111100,
            0b01100110,
            0b01100000,
            0b00111100,
            0b00000110,
            0b00000110,
            0b01100110,
            0b00111100,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
        ]),
        'T' => Some(&[
            0b01111110,
            0b00011000,
            0b00011000,
            0b00011000,
            0b00011000,
            0b00011000,
            0b00011000,
            0b00011000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
        ]),
        'X' => Some(&[
            0b01100110,
            0b01100110,
            0b00111100,
            0b00011000,
            0b00011000,
            0b00111100,
            0b01100110,
            0b01100110,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
        ]),
        'I' => Some(&[
            0b01111110,
            0b00011000,
            0b00011000,
            0b00011000,
            0b00011000,
            0b00011000,
            0b00011000,
            0b01111110,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
        ]),
        'L' => Some(&[
            0b01100000,
            0b01100000,
            0b01100000,
            0b01100000,
            0b01100000,
            0b01100000,
            0b01100000,
            0b01111110,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
        ]),
        'R' => Some(&[
            0b01111100,
            0b01100110,
            0b01100110,
            0b01111100,
            0b01111000,
            0b01101100,
            0b01100110,
            0b01100110,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
        ]),
        'Y' => Some(&[
            0b01100110,
            0b01100110,
            0b01100110,
            0b00111100,
            0b00011000,
            0b00011000,
            0b00011000,
            0b00011000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
        ]),
        'M' => Some(&[
            0b01000010,
            0b01100110,
            0b01111110,
            0b01011010,
            0b01000010,
            0b01000010,
            0b01000010,
            0b01000010,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
        ]),
        'O' => Some(&[
            0b00111100,
            0b01100110,
            0b01100110,
            0b01100110,
            0b01100110,
            0b01100110,
            0b01100110,
            0b00111100,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
        ]),
        'G' => Some(&[
            0b00111100,
            0b01100110,
            0b01100000,
            0b01100000,
            0b01101110,
            0b01100110,
            0b01100110,
            0b00111100,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
        ]),
        '0' => Some(&[
            0b00111100,
            0b01100110,
            0b01101110,
            0b01110110,
            0b01100110,
            0b01100110,
            0b01100110,
            0b00111100,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
        ]),
        '1' => Some(&[
            0b00011000,
            0b00111000,
            0b00011000,
            0b00011000,
            0b00011000,
            0b00011000,
            0b00011000,
            0b01111110,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
        ]),
        '2' => Some(&[
            0b00111100,
            0b01100110,
            0b00000110,
            0b00001100,
            0b00011000,
            0b00110000,
            0b01100000,
            0b01111110,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
        ]),
        '3' => Some(&[
            0b00111100,
            0b01100110,
            0b00000110,
            0b00011100,
            0b00000110,
            0b00000110,
            0b01100110,
            0b00111100,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
        ]),
        '4' => Some(&[
            0b00001100,
            0b00011100,
            0b00101100,
            0b01001100,
            0b01111110,
            0b00001100,
            0b00001100,
            0b00001100,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
        ]),
        '5' => Some(&[
            0b01111110,
            0b01100000,
            0b01100000,
            0b01111100,
            0b00000110,
            0b00000110,
            0b01100110,
            0b00111100,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
        ]),
        ':' => Some(&[
            0b00000000,
            0b00000000,
            0b00011000,
            0b00011000,
            0b00000000,
            0b00000000,
            0b00011000,
            0b00011000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
        ]),
        '/' => Some(&[
            0b00000110,
            0b00001100,
            0b00001100,
            0b00011000,
            0b00011000,
            0b00110000,
            0b00110000,
            0b01100000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
        ]),
        '-' => Some(&[
            0b00000000,
            0b00000000,
            0b00000000,
            0b01111110,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
        ]),
        'N' => Some(&[
            0b01100110,
            0b01110110,
            0b01111110,
            0b01101110,
            0b01100110,
            0b01100110,
            0b01100110,
            0b01100110,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
        ]),
        'W' => Some(&[
            0b01000010,
            0b01000010,
            0b01000010,
            0b01011010,
            0b01111110,
            0b01100110,
            0b01100110,
            0b01000010,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
        ]),
        'P' => Some(&[
            0b01111100,
            0b01100110,
            0b01100110,
            0b01111100,
            0b01100000,
            0b01100000,
            0b01100000,
            0b01100000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
        ]),
        'V' => Some(&[
            0b01100110,
            0b01100110,
            0b01100110,
            0b01100110,
            0b01100110,
            0b01100110,
            0b00111100,
            0b00011000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
        ]),
        'F' => Some(&[
            0b01111110,
            0b01100000,
            0b01100000,
            0b01111100,
            0b01100000,
            0b01100000,
            0b01100000,
            0b01100000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
        ]),
        'K' => Some(&[
            0b01100110,
            0b01101100,
            0b01111000,
            0b01110000,
            0b01111000,
            0b01101100,
            0b01100110,
            0b01100110,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
        ]),
        'U' => Some(&[
            0b01100110,
            0b01100110,
            0b01100110,
            0b01100110,
            0b01100110,
            0b01100110,
            0b01100110,
            0b00111100,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
        ]),
        '?' => Some(&[
            0b00111100,
            0b01100110,
            0b00000110,
            0b00001100,
            0b00011000,
            0b00000000,
            0b00011000,
            0b00011000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
        ]),
        '<' => Some(&[ // Left arrow
            0b00000000,
            0b00001100,
            0b00011000,
            0b00110000,
            0b01100000,
            0b00110000,
            0b00011000,
            0b00001100,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
        ]),
        '>' => Some(&[ // Right arrow
            0b00000000,
            0b01100000,
            0b00110000,
            0b00011000,
            0b00001100,
            0b00011000,
            0b00110000,
            0b01100000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
        ]),
        '^' => Some(&[ // Up arrow
            0b00000000,
            0b00011000,
            0b00111100,
            0b01111110,
            0b00011000,
            0b00011000,
            0b00011000,
            0b00011000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
        ]),
        'v' => Some(&[ // Down arrow (using 'v' for simplicity)
            0b00000000,
            0b00011000,
            0b00011000,
            0b00011000,
            0b00011000,
            0b01111110,
            0b00111100,
            0b00011000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
        ]),
        '.' => Some(&[
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00011000,
            0b00011000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
        ]),
        ',' => Some(&[
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00011000,
            0b00011000,
            0b00110000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
            0b00000000,
        ]),
        ' ' => Some(&[0; 16]),
        _ => None,
    }
}

/// Generate a texture containing the rendered text
pub fn create_text_texture(text: &str, max_width: u32) -> Vec<u8> {
    let mut texture_data = vec![0u8; (TEXTURE_WIDTH * TEXTURE_HEIGHT * 4) as usize];
    
    let mut y = 10;
    
    for line in text.lines() {
        let mut x = 10;
        
        for ch in line.chars() {
            // Convert to uppercase for our simple font, or use a simple fallback
            let ch = if ch.is_ascii() && ch.is_alphabetic() {
                ch.to_ascii_uppercase()
            } else if ch.is_ascii() {
                ch
            } else {
                '?' // Fallback for non-ASCII
            };
            
            if let Some(bitmap) = get_char_bitmap(ch) {
                // Draw character
                for (row_idx, &row_data) in bitmap.iter().enumerate() {
                    for bit in 0..8 {
                        if row_data & (1 << (7 - bit)) != 0 {
                            let px = x + bit;
                            let py = y + row_idx as u32;
                            
                            if px < TEXTURE_WIDTH && py < TEXTURE_HEIGHT {
                                let idx = ((py * TEXTURE_WIDTH + px) * 4) as usize;
                                texture_data[idx] = 255;     // R
                                texture_data[idx + 1] = 255; // G
                                texture_data[idx + 2] = 255; // B
                                texture_data[idx + 3] = 255; // A
                            }
                        }
                    }
                }
            }
            
            x += CHAR_WIDTH + 2; // Character width plus spacing
            
            // Wrap to next line if needed
            if x + CHAR_WIDTH > max_width {
                x = 10;
                y += CHAR_HEIGHT + 4;
            }
        }
        
        y += CHAR_HEIGHT + 4; // Next line
    }
    
    texture_data
}